
StopWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000aca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00000aca  00000b5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080008e  0080008e  00000b8c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b8c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000206b  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c3b  00000000  00000000  00002e33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001040  00000000  00000000  00003a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002fc  00000000  00000000  00004ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a2  00000000  00000000  00004dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000123d  00000000  00000000  0000544e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  0000668b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 38       	cpi	r26, 0x8E	; 142
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e8       	ldi	r26, 0x8E	; 142
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 39       	cpi	r26, 0x90	; 144
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 63 05 	jmp	0xac6	; 0xac6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "Stop_Watch.h"


int main(void)
{
   Project_Init();
  92:	0e 94 53 00 	call	0xa6	; 0xa6 <Project_Init>
   while (1)
   {
      App(); 
  96:	0e 94 f7 01 	call	0x3ee	; 0x3ee <App>
  9a:	fd cf       	rjmp	.-6      	; 0x96 <main+0x4>

0000009c <Drivers_Init>:
		 Button4_Functionality();
	 }
}
void Drivers_Init (void)
{
	PORT_Init();
  9c:	0e 94 9f 04 	call	0x93e	; 0x93e <PORT_Init>
	LCD_Init();
  a0:	0e 94 ce 02 	call	0x59c	; 0x59c <LCD_Init>
  a4:	08 95       	ret

000000a6 <Project_Init>:
}

void Project_Init (void)
{
	Drivers_Init();
  a6:	0e 94 4e 00 	call	0x9c	; 0x9c <Drivers_Init>
	LCD_GoTo(0,0);
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_GoTo>
	LCD_WriteString("MIN : SEC");
  b2:	84 e8       	ldi	r24, 0x84	; 132
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 48 03 	call	0x690	; 0x690 <LCD_WriteString>
	LCD_GoTo(1,0);
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_GoTo>
	LCD_WriteInteger(i);
  c2:	60 91 8f 00 	lds	r22, 0x008F	; 0x80008f <i>
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_WriteInteger>
	LCD_GoTo(1,4);
  d0:	64 e0       	ldi	r22, 0x04	; 4
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_GoTo>
	LCD_WriteChar(':');
  d8:	8a e3       	ldi	r24, 0x3A	; 58
  da:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LCD_WriteChar>
	LCD_GoTo(1,6);
  de:	66 e0       	ldi	r22, 0x06	; 6
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_GoTo>
	LCD_WriteInteger(j);
  e6:	60 91 8e 00 	lds	r22, 0x008E	; 0x80008e <__data_end>
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_WriteInteger>
  f4:	08 95       	ret

000000f6 <Button1_Functionality>:
}

void Button1_Functionality (void)
{
	LCD_Clear();
  f6:	0e 94 04 04 	call	0x808	; 0x808 <LCD_Clear>
	i++;
  fa:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <i>
  fe:	8f 5f       	subi	r24, 0xFF	; 255
 100:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <i>
	LCD_GoTo(0,0);
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_GoTo>
	LCD_WriteString("MIN : SEC");
 10c:	84 e8       	ldi	r24, 0x84	; 132
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 48 03 	call	0x690	; 0x690 <LCD_WriteString>
	LCD_GoTo(1,0);
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_GoTo>
	LCD_WriteInteger(i);
 11c:	60 91 8f 00 	lds	r22, 0x008F	; 0x80008f <i>
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_WriteInteger>
	LCD_GoTo(1,4);
 12a:	64 e0       	ldi	r22, 0x04	; 4
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_GoTo>
	LCD_WriteChar(':');
 132:	8a e3       	ldi	r24, 0x3A	; 58
 134:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LCD_WriteChar>
	LCD_GoTo(1,6);
 138:	66 e0       	ldi	r22, 0x06	; 6
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_GoTo>
	LCD_WriteInteger(j);
 140:	60 91 8e 00 	lds	r22, 0x008E	; 0x80008e <__data_end>
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_WriteInteger>
 14e:	08 95       	ret

00000150 <Button2_Functionality>:
}

void Button2_Functionality (void)
{
	if (j<59) //Making Sure Seconds Don't exceed 59
 150:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
 154:	8b 33       	cpi	r24, 0x3B	; 59
 156:	60 f5       	brcc	.+88     	; 0x1b0 <Button2_Functionality+0x60>
	{
		LCD_Clear();
 158:	0e 94 04 04 	call	0x808	; 0x808 <LCD_Clear>
		j++;
 15c:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
 160:	8f 5f       	subi	r24, 0xFF	; 255
 162:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <__data_end>
		LCD_GoTo(0,0);
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_GoTo>
		LCD_WriteString("MIN : SEC");
 16e:	84 e8       	ldi	r24, 0x84	; 132
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 48 03 	call	0x690	; 0x690 <LCD_WriteString>
		LCD_GoTo(1,0);
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_GoTo>
		LCD_WriteInteger(i);
 17e:	60 91 8f 00 	lds	r22, 0x008F	; 0x80008f <i>
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_WriteInteger>
		LCD_GoTo(1,4);
 18c:	64 e0       	ldi	r22, 0x04	; 4
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_GoTo>
		LCD_WriteChar(':');
 194:	8a e3       	ldi	r24, 0x3A	; 58
 196:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LCD_WriteChar>
		LCD_GoTo(1,6);
 19a:	66 e0       	ldi	r22, 0x06	; 6
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_GoTo>
		LCD_WriteInteger(j);
 1a2:	60 91 8e 00 	lds	r22, 0x008E	; 0x80008e <__data_end>
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_WriteInteger>
 1b0:	08 95       	ret

000001b2 <Button4_Functionality>:
	}
}

void Button4_Functionality (void)
{
	LCD_Clear();
 1b2:	0e 94 04 04 	call	0x808	; 0x808 <LCD_Clear>
	i=0;
 1b6:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <i>
	j=0;
 1ba:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <__data_end>
	LCD_GoTo(0,0);
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_GoTo>
	LCD_WriteString("MIN : SEC");
 1c6:	84 e8       	ldi	r24, 0x84	; 132
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 48 03 	call	0x690	; 0x690 <LCD_WriteString>
	LCD_GoTo(1,0);
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_GoTo>
	LCD_WriteInteger(i);
 1d6:	60 91 8f 00 	lds	r22, 0x008F	; 0x80008f <i>
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_WriteInteger>
	LCD_GoTo(1,4);
 1e4:	64 e0       	ldi	r22, 0x04	; 4
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_GoTo>
	LCD_WriteChar(':');
 1ec:	8a e3       	ldi	r24, 0x3A	; 58
 1ee:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LCD_WriteChar>
	LCD_GoTo(1,6);
 1f2:	66 e0       	ldi	r22, 0x06	; 6
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_GoTo>
	LCD_WriteInteger(j);
 1fa:	60 91 8e 00 	lds	r22, 0x008E	; 0x80008e <__data_end>
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_WriteInteger>
	Buzzer_OFF();
 208:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Buzzer_OFF>
 20c:	08 95       	ret

0000020e <Seconds_CountDown>:
}

void Seconds_CountDown (void)
{
	while(j!=0)
 20e:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
 212:	88 23       	and	r24, r24
 214:	c9 f1       	breq	.+114    	; 0x288 <Seconds_CountDown+0x7a>
	{
		LCD_Clear();
 216:	0e 94 04 04 	call	0x808	; 0x808 <LCD_Clear>
		j--;
 21a:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
 21e:	81 50       	subi	r24, 0x01	; 1
 220:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <__data_end>
		LCD_GoTo(0,0);
 224:	60 e0       	ldi	r22, 0x00	; 0
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_GoTo>
		LCD_WriteString("MIN : SEC");
 22c:	84 e8       	ldi	r24, 0x84	; 132
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 48 03 	call	0x690	; 0x690 <LCD_WriteString>
		LCD_GoTo(1,0);
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_GoTo>
		LCD_WriteInteger(i);
 23c:	60 91 8f 00 	lds	r22, 0x008F	; 0x80008f <i>
 240:	70 e0       	ldi	r23, 0x00	; 0
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_WriteInteger>
		LCD_GoTo(1,4);
 24a:	64 e0       	ldi	r22, 0x04	; 4
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_GoTo>
		LCD_WriteChar(':');
 252:	8a e3       	ldi	r24, 0x3A	; 58
 254:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LCD_WriteChar>
		LCD_GoTo(1,6);
 258:	66 e0       	ldi	r22, 0x06	; 6
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_GoTo>
		LCD_WriteInteger(j);
 260:	60 91 8e 00 	lds	r22, 0x008E	; 0x80008e <__data_end>
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_WriteInteger>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26e:	2f ef       	ldi	r18, 0xFF	; 255
 270:	83 ed       	ldi	r24, 0xD3	; 211
 272:	90 e3       	ldi	r25, 0x30	; 48
 274:	21 50       	subi	r18, 0x01	; 1
 276:	80 40       	sbci	r24, 0x00	; 0
 278:	90 40       	sbci	r25, 0x00	; 0
 27a:	e1 f7       	brne	.-8      	; 0x274 <Seconds_CountDown+0x66>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <Seconds_CountDown+0x70>
 27e:	00 00       	nop
	Buzzer_OFF();
}

void Seconds_CountDown (void)
{
	while(j!=0)
 280:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
 284:	81 11       	cpse	r24, r1
 286:	c7 cf       	rjmp	.-114    	; 0x216 <Seconds_CountDown+0x8>
 288:	08 95       	ret

0000028a <Time_Finished>:
	}
}

void Time_Finished (void)
{
	LCD_Clear();
 28a:	0e 94 04 04 	call	0x808	; 0x808 <LCD_Clear>
	LCD_WriteString(Arr);
 28e:	86 e7       	ldi	r24, 0x76	; 118
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 48 03 	call	0x690	; 0x690 <LCD_WriteString>
	Buzzer_ON();
 296:	0e 94 66 02 	call	0x4cc	; 0x4cc <Buzzer_ON>
	LED_ON();
 29a:	0e 94 0e 04 	call	0x81c	; 0x81c <LED_ON>
 29e:	2f ef       	ldi	r18, 0xFF	; 255
 2a0:	87 ea       	ldi	r24, 0xA7	; 167
 2a2:	91 e6       	ldi	r25, 0x61	; 97
 2a4:	21 50       	subi	r18, 0x01	; 1
 2a6:	80 40       	sbci	r24, 0x00	; 0
 2a8:	90 40       	sbci	r25, 0x00	; 0
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <Time_Finished+0x1a>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <Time_Finished+0x24>
 2ae:	00 00       	nop
	_delay_ms(2000);
	Buzzer_OFF();
 2b0:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Buzzer_OFF>
	LED_OFF();
 2b4:	0e 94 13 04 	call	0x826	; 0x826 <LED_OFF>
 2b8:	2f ef       	ldi	r18, 0xFF	; 255
 2ba:	83 ed       	ldi	r24, 0xD3	; 211
 2bc:	90 e3       	ldi	r25, 0x30	; 48
 2be:	21 50       	subi	r18, 0x01	; 1
 2c0:	80 40       	sbci	r24, 0x00	; 0
 2c2:	90 40       	sbci	r25, 0x00	; 0
 2c4:	e1 f7       	brne	.-8      	; 0x2be <Time_Finished+0x34>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <Time_Finished+0x3e>
 2c8:	00 00       	nop
	_delay_ms(1000);
	Buzzer_ON();
 2ca:	0e 94 66 02 	call	0x4cc	; 0x4cc <Buzzer_ON>
	LED_ON();
 2ce:	0e 94 0e 04 	call	0x81c	; 0x81c <LED_ON>
 2d2:	2f ef       	ldi	r18, 0xFF	; 255
 2d4:	87 ea       	ldi	r24, 0xA7	; 167
 2d6:	91 e6       	ldi	r25, 0x61	; 97
 2d8:	21 50       	subi	r18, 0x01	; 1
 2da:	80 40       	sbci	r24, 0x00	; 0
 2dc:	90 40       	sbci	r25, 0x00	; 0
 2de:	e1 f7       	brne	.-8      	; 0x2d8 <Time_Finished+0x4e>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <Time_Finished+0x58>
 2e2:	00 00       	nop
	_delay_ms(2000);
	Buzzer_OFF();
 2e4:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Buzzer_OFF>
	LED_OFF();
 2e8:	0e 94 13 04 	call	0x826	; 0x826 <LED_OFF>
 2ec:	08 95       	ret

000002ee <Button3_Functionality>:
		LCD_WriteInteger(j);
	}
}

void Button3_Functionality (void)
{
 2ee:	cf 93       	push	r28
 2f0:	2f ef       	ldi	r18, 0xFF	; 255
 2f2:	83 ed       	ldi	r24, 0xD3	; 211
 2f4:	90 e3       	ldi	r25, 0x30	; 48
 2f6:	21 50       	subi	r18, 0x01	; 1
 2f8:	80 40       	sbci	r24, 0x00	; 0
 2fa:	90 40       	sbci	r25, 0x00	; 0
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <Button3_Functionality+0x8>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <Button3_Functionality+0x12>
 300:	00 00       	nop
	_delay_ms(1000);
	Seconds_CountDown();
 302:	0e 94 07 01 	call	0x20e	; 0x20e <Seconds_CountDown>
	{
		if(j==0)
		{
			LCD_Clear();
			i--;
			j=59;
 306:	cb e3       	ldi	r28, 0x3B	; 59

void Button3_Functionality (void)
{
	_delay_ms(1000);
	Seconds_CountDown();
	while(i!=0)
 308:	3b c0       	rjmp	.+118    	; 0x380 <Button3_Functionality+0x92>
	{
		if(j==0)
 30a:	91 11       	cpse	r25, r1
 30c:	3d c0       	rjmp	.+122    	; 0x388 <Button3_Functionality+0x9a>
		{
			LCD_Clear();
 30e:	0e 94 04 04 	call	0x808	; 0x808 <LCD_Clear>
			i--;
 312:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <i>
 316:	81 50       	subi	r24, 0x01	; 1
 318:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <i>
			j=59;
 31c:	c0 93 8e 00 	sts	0x008E, r28	; 0x80008e <__data_end>
			LCD_GoTo(0,0);
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_GoTo>
			LCD_WriteString("MIN : SEC");
 328:	84 e8       	ldi	r24, 0x84	; 132
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 48 03 	call	0x690	; 0x690 <LCD_WriteString>
			LCD_GoTo(1,0);
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_GoTo>
			LCD_WriteInteger(i);
 338:	60 91 8f 00 	lds	r22, 0x008F	; 0x80008f <i>
 33c:	70 e0       	ldi	r23, 0x00	; 0
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_WriteInteger>
			LCD_GoTo(1,4);
 346:	64 e0       	ldi	r22, 0x04	; 4
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_GoTo>
			LCD_WriteChar(':');
 34e:	8a e3       	ldi	r24, 0x3A	; 58
 350:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LCD_WriteChar>
			LCD_GoTo(1,6);
 354:	66 e0       	ldi	r22, 0x06	; 6
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_GoTo>
			LCD_WriteInteger(j);
 35c:	60 91 8e 00 	lds	r22, 0x008E	; 0x80008e <__data_end>
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_WriteInteger>
 36a:	2f ef       	ldi	r18, 0xFF	; 255
 36c:	83 ed       	ldi	r24, 0xD3	; 211
 36e:	90 e3       	ldi	r25, 0x30	; 48
 370:	21 50       	subi	r18, 0x01	; 1
 372:	80 40       	sbci	r24, 0x00	; 0
 374:	90 40       	sbci	r25, 0x00	; 0
 376:	e1 f7       	brne	.-8      	; 0x370 <Button3_Functionality+0x82>
 378:	00 c0       	rjmp	.+0      	; 0x37a <Button3_Functionality+0x8c>
 37a:	00 00       	nop
			_delay_ms(1000);
			Seconds_CountDown();
 37c:	0e 94 07 01 	call	0x20e	; 0x20e <Seconds_CountDown>

void Button3_Functionality (void)
{
	_delay_ms(1000);
	Seconds_CountDown();
	while(i!=0)
 380:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <i>
	{
		if(j==0)
 384:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <__data_end>

void Button3_Functionality (void)
{
	_delay_ms(1000);
	Seconds_CountDown();
	while(i!=0)
 388:	81 11       	cpse	r24, r1
 38a:	bf cf       	rjmp	.-130    	; 0x30a <Button3_Functionality+0x1c>
			LCD_WriteInteger(j);
			_delay_ms(1000);
			Seconds_CountDown();
		}
	}
	if (i==0 && j==0) //When Time is 0:0 Turn On Buzzer
 38c:	91 11       	cpse	r25, r1
 38e:	2d c0       	rjmp	.+90     	; 0x3ea <Button3_Functionality+0xfc>
	{
		
		Time_Finished();
 390:	0e 94 45 01 	call	0x28a	; 0x28a <Time_Finished>
		LCD_Clear();
 394:	0e 94 04 04 	call	0x808	; 0x808 <LCD_Clear>
		i=0;
 398:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <i>
		j=0;
 39c:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <__data_end>
		LCD_GoTo(0,0);
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_GoTo>
		LCD_WriteString("MIN : SEC");
 3a8:	84 e8       	ldi	r24, 0x84	; 132
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 48 03 	call	0x690	; 0x690 <LCD_WriteString>
		LCD_GoTo(1,0);
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_GoTo>
		LCD_WriteInteger(i);
 3b8:	60 91 8f 00 	lds	r22, 0x008F	; 0x80008f <i>
 3bc:	70 e0       	ldi	r23, 0x00	; 0
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_WriteInteger>
		LCD_GoTo(1,4);
 3c6:	64 e0       	ldi	r22, 0x04	; 4
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_GoTo>
		LCD_WriteChar(':');
 3ce:	8a e3       	ldi	r24, 0x3A	; 58
 3d0:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LCD_WriteChar>
		LCD_GoTo(1,6);
 3d4:	66 e0       	ldi	r22, 0x06	; 6
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_GoTo>
		LCD_WriteInteger(j);
 3dc:	60 91 8e 00 	lds	r22, 0x008E	; 0x80008e <__data_end>
 3e0:	70 e0       	ldi	r23, 0x00	; 0
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_WriteInteger>
	}
}
 3ea:	cf 91       	pop	r28
 3ec:	08 95       	ret

000003ee <App>:
uint8 Arr[String_Size]="Time's Up";


void App (void)
{
	 Button1_Val=Button_GetValue(Button_1);
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	0e 94 25 02 	call	0x44a	; 0x44a <Button_GetValue>
 3f4:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <Button1_Val>
	 Button2_Val=Button_GetValue(Button_2);
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	0e 94 25 02 	call	0x44a	; 0x44a <Button_GetValue>
 3fe:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <Button2_Val>
	 Button3_Val=Button_GetValue(Button_3);
 402:	82 e0       	ldi	r24, 0x02	; 2
 404:	0e 94 25 02 	call	0x44a	; 0x44a <Button_GetValue>
 408:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <Button3_Val>
	 Button4_Val=Button_GetValue(Button_4);
 40c:	83 e0       	ldi	r24, 0x03	; 3
 40e:	0e 94 25 02 	call	0x44a	; 0x44a <Button_GetValue>
 412:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <Button4_Val>
	 
	 if (Button1_Val==0) //Increase Minutes Button
 416:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <Button1_Val>
 41a:	91 11       	cpse	r25, r1
 41c:	03 c0       	rjmp	.+6      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	 {
		 Button1_Functionality();
 41e:	0e 94 7b 00 	call	0xf6	; 0xf6 <Button1_Functionality>
 422:	08 95       	ret
	 }
	 else if (Button2_Val==0) //Increase Seconds Button
 424:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <Button2_Val>
 428:	91 11       	cpse	r25, r1
 42a:	03 c0       	rjmp	.+6      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
	 {
		 Button2_Functionality();
 42c:	0e 94 a8 00 	call	0x150	; 0x150 <Button2_Functionality>
 430:	08 95       	ret
	 }
	 else if (Button3_Val==0) //Timer ON Button
 432:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <Button3_Val>
 436:	91 11       	cpse	r25, r1
 438:	03 c0       	rjmp	.+6      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
	 {
		 Button3_Functionality();
 43a:	0e 94 77 01 	call	0x2ee	; 0x2ee <Button3_Functionality>
 43e:	08 95       	ret
	 }
	 else if(Button4_Val==0)  //Reset Button
 440:	81 11       	cpse	r24, r1
 442:	02 c0       	rjmp	.+4      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
	 {
		 Button4_Functionality();
 444:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Button4_Functionality>
 448:	08 95       	ret

0000044a <Button_GetValue>:
}
uint8 Button_GetValue(uint8 Button)
{
	//uint8 Temp=0;
	uint8 Button_Val=1;
	switch (Button)
 44a:	81 30       	cpi	r24, 0x01	; 1
 44c:	a1 f0       	breq	.+40     	; 0x476 <Button_GetValue+0x2c>
 44e:	28 f0       	brcs	.+10     	; 0x45a <Button_GetValue+0x10>
 450:	82 30       	cpi	r24, 0x02	; 2
 452:	f9 f0       	breq	.+62     	; 0x492 <Button_GetValue+0x48>
 454:	83 30       	cpi	r24, 0x03	; 3
 456:	51 f1       	breq	.+84     	; 0x4ac <Button_GetValue+0x62>
 458:	37 c0       	rjmp	.+110    	; 0x4c8 <Button_GetValue+0x7e>
	{
		case Button_1:
		Button_Val=GET_BIT(PIND,2);
 45a:	80 b3       	in	r24, 0x10	; 16
 45c:	82 fb       	bst	r24, 2
 45e:	88 27       	eor	r24, r24
 460:	80 f9       	bld	r24, 0
 462:	2f ef       	ldi	r18, 0xFF	; 255
 464:	33 ef       	ldi	r19, 0xF3	; 243
 466:	91 e0       	ldi	r25, 0x01	; 1
 468:	21 50       	subi	r18, 0x01	; 1
 46a:	30 40       	sbci	r19, 0x00	; 0
 46c:	90 40       	sbci	r25, 0x00	; 0
 46e:	e1 f7       	brne	.-8      	; 0x468 <Button_GetValue+0x1e>
 470:	00 c0       	rjmp	.+0      	; 0x472 <Button_GetValue+0x28>
 472:	00 00       	nop
 474:	08 95       	ret
	    }*/
	     _delay_ms(40);
		 break;
		 
		 case Button_2:
		 Button_Val=GET_BIT(PIND,3);
 476:	80 b3       	in	r24, 0x10	; 16
 478:	83 fb       	bst	r24, 3
 47a:	88 27       	eor	r24, r24
 47c:	80 f9       	bld	r24, 0
 47e:	2f ef       	ldi	r18, 0xFF	; 255
 480:	33 ef       	ldi	r19, 0xF3	; 243
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	21 50       	subi	r18, 0x01	; 1
 486:	30 40       	sbci	r19, 0x00	; 0
 488:	90 40       	sbci	r25, 0x00	; 0
 48a:	e1 f7       	brne	.-8      	; 0x484 <Button_GetValue+0x3a>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <Button_GetValue+0x44>
 48e:	00 00       	nop
 490:	08 95       	ret
	    }*/
		 _delay_ms(40);
		 break;
		 
		 case Button_3:
		 Button_Val=GET_BIT(PIND,4);
 492:	80 b3       	in	r24, 0x10	; 16
 494:	82 95       	swap	r24
 496:	81 70       	andi	r24, 0x01	; 1
 498:	2f ef       	ldi	r18, 0xFF	; 255
 49a:	33 ef       	ldi	r19, 0xF3	; 243
 49c:	91 e0       	ldi	r25, 0x01	; 1
 49e:	21 50       	subi	r18, 0x01	; 1
 4a0:	30 40       	sbci	r19, 0x00	; 0
 4a2:	90 40       	sbci	r25, 0x00	; 0
 4a4:	e1 f7       	brne	.-8      	; 0x49e <Button_GetValue+0x54>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <Button_GetValue+0x5e>
 4a8:	00 00       	nop
 4aa:	08 95       	ret
	    }*/
		 _delay_ms(40);
		 break;
		 
		 case Button_4:
		 Button_Val=GET_BIT(PIND,5);
 4ac:	80 b3       	in	r24, 0x10	; 16
 4ae:	85 fb       	bst	r24, 5
 4b0:	88 27       	eor	r24, r24
 4b2:	80 f9       	bld	r24, 0
 4b4:	2f ef       	ldi	r18, 0xFF	; 255
 4b6:	33 ef       	ldi	r19, 0xF3	; 243
 4b8:	91 e0       	ldi	r25, 0x01	; 1
 4ba:	21 50       	subi	r18, 0x01	; 1
 4bc:	30 40       	sbci	r19, 0x00	; 0
 4be:	90 40       	sbci	r25, 0x00	; 0
 4c0:	e1 f7       	brne	.-8      	; 0x4ba <Button_GetValue+0x70>
 4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <Button_GetValue+0x7a>
 4c4:	00 00       	nop
 4c6:	08 95       	ret
	CLR_BIT(DDRD,5); //Input
}
uint8 Button_GetValue(uint8 Button)
{
	//uint8 Temp=0;
	uint8 Button_Val=1;
 4c8:	81 e0       	ldi	r24, 0x01	; 1
		 default:
		 break;
	}
	
	return Button_Val;
 4ca:	08 95       	ret

000004cc <Buzzer_ON>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void Buzzer_ON (void)
{
	DIO_WriteChannel(PORTC_PIN5 , PIN_HIGH);
 4cc:	61 e0       	ldi	r22, 0x01	; 1
 4ce:	85 e1       	ldi	r24, 0x15	; 21
 4d0:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
 4d4:	08 95       	ret

000004d6 <Buzzer_OFF>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void Buzzer_OFF (void)
{
	DIO_WriteChannel(PORTC_PIN5 , PIN_LOW);
 4d6:	60 e0       	ldi	r22, 0x00	; 0
 4d8:	85 e1       	ldi	r24, 0x15	; 21
 4da:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
 4de:	08 95       	ret

000004e0 <LCD_WriteCommand>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_WriteCommand(uint8 cmd)
{
 4e0:	cf 93       	push	r28
 4e2:	c8 2f       	mov	r28, r24
	DIO_WriteChannel(LCD_RS_PIN , PIN_LOW);
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_E_PIN , PIN_LOW);
 4ec:	60 e0       	ldi	r22, 0x00	; 0
 4ee:	82 e0       	ldi	r24, 0x02	; 2
 4f0:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_D4_PIN , GET_BIT(cmd , 4));
 4f4:	c4 fb       	bst	r28, 4
 4f6:	66 27       	eor	r22, r22
 4f8:	60 f9       	bld	r22, 0
 4fa:	83 e0       	ldi	r24, 0x03	; 3
 4fc:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D5_PIN , GET_BIT(cmd , 5));
 500:	c5 fb       	bst	r28, 5
 502:	66 27       	eor	r22, r22
 504:	60 f9       	bld	r22, 0
 506:	84 e0       	ldi	r24, 0x04	; 4
 508:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D6_PIN , GET_BIT(cmd , 6));
 50c:	c6 fb       	bst	r28, 6
 50e:	66 27       	eor	r22, r22
 510:	60 f9       	bld	r22, 0
 512:	85 e0       	ldi	r24, 0x05	; 5
 514:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D7_PIN , GET_BIT(cmd , 7));
 518:	6c 2f       	mov	r22, r28
 51a:	66 1f       	adc	r22, r22
 51c:	66 27       	eor	r22, r22
 51e:	66 1f       	adc	r22, r22
 520:	86 e0       	ldi	r24, 0x06	; 6
 522:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_E_PIN , PIN_HIGH);
 526:	61 e0       	ldi	r22, 0x01	; 1
 528:	82 e0       	ldi	r24, 0x02	; 2
 52a:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
 52e:	8f e9       	ldi	r24, 0x9F	; 159
 530:	9f e0       	ldi	r25, 0x0F	; 15
 532:	01 97       	sbiw	r24, 0x01	; 1
 534:	f1 f7       	brne	.-4      	; 0x532 <LCD_WriteCommand+0x52>
 536:	00 c0       	rjmp	.+0      	; 0x538 <LCD_WriteCommand+0x58>
 538:	00 00       	nop
	_delay_ms(1);
	DIO_WriteChannel(LCD_E_PIN , PIN_LOW);
 53a:	60 e0       	ldi	r22, 0x00	; 0
 53c:	82 e0       	ldi	r24, 0x02	; 2
 53e:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_D4_PIN , GET_BIT(cmd , 0));
 542:	6c 2f       	mov	r22, r28
 544:	61 70       	andi	r22, 0x01	; 1
 546:	83 e0       	ldi	r24, 0x03	; 3
 548:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D5_PIN , GET_BIT(cmd , 1));
 54c:	c1 fb       	bst	r28, 1
 54e:	66 27       	eor	r22, r22
 550:	60 f9       	bld	r22, 0
 552:	84 e0       	ldi	r24, 0x04	; 4
 554:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D6_PIN , GET_BIT(cmd , 2));
 558:	c2 fb       	bst	r28, 2
 55a:	66 27       	eor	r22, r22
 55c:	60 f9       	bld	r22, 0
 55e:	85 e0       	ldi	r24, 0x05	; 5
 560:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D7_PIN , GET_BIT(cmd , 3));
 564:	c3 fb       	bst	r28, 3
 566:	66 27       	eor	r22, r22
 568:	60 f9       	bld	r22, 0
 56a:	86 e0       	ldi	r24, 0x06	; 6
 56c:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_E_PIN , PIN_HIGH);
 570:	61 e0       	ldi	r22, 0x01	; 1
 572:	82 e0       	ldi	r24, 0x02	; 2
 574:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
 578:	8f e9       	ldi	r24, 0x9F	; 159
 57a:	9f e0       	ldi	r25, 0x0F	; 15
 57c:	01 97       	sbiw	r24, 0x01	; 1
 57e:	f1 f7       	brne	.-4      	; 0x57c <LCD_WriteCommand+0x9c>
 580:	00 c0       	rjmp	.+0      	; 0x582 <LCD_WriteCommand+0xa2>
 582:	00 00       	nop
	_delay_ms(1);
	DIO_WriteChannel(LCD_E_PIN , PIN_LOW);
 584:	60 e0       	ldi	r22, 0x00	; 0
 586:	82 e0       	ldi	r24, 0x02	; 2
 588:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
 58c:	8f e1       	ldi	r24, 0x1F	; 31
 58e:	9e e4       	ldi	r25, 0x4E	; 78
 590:	01 97       	sbiw	r24, 0x01	; 1
 592:	f1 f7       	brne	.-4      	; 0x590 <LCD_WriteCommand+0xb0>
 594:	00 c0       	rjmp	.+0      	; 0x596 <LCD_WriteCommand+0xb6>
 596:	00 00       	nop
	
	_delay_ms(5);
}
 598:	cf 91       	pop	r28
 59a:	08 95       	ret

0000059c <LCD_Init>:
*******************************************************************************/
void LCD_Init(void)
{
	#if (LCD_OPERATION_MODE == 4)
	/*LCD 4 BIT MODE COMMANDS*/
	LCD_WriteCommand(0X33);
 59c:	83 e3       	ldi	r24, 0x33	; 51
 59e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_WriteCommand>
	LCD_WriteCommand(0X32);
 5a2:	82 e3       	ldi	r24, 0x32	; 50
 5a4:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_WriteCommand>
	LCD_WriteCommand(0X28);
 5a8:	88 e2       	ldi	r24, 0x28	; 40
 5aa:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_WriteCommand>
	/************************/
	/*COMMANDS FOR LCD*/
	LCD_WriteCommand(0x0C);
 5ae:	8c e0       	ldi	r24, 0x0C	; 12
 5b0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_WriteCommand>
	LCD_WriteCommand(0X01);
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_WriteCommand>
	LCD_WriteCommand(0X06);
 5ba:	86 e0       	ldi	r24, 0x06	; 6
 5bc:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_WriteCommand>
	LCD_WriteCommand(0X02);
 5c0:	82 e0       	ldi	r24, 0x02	; 2
 5c2:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_WriteCommand>
 5c6:	8f e1       	ldi	r24, 0x1F	; 31
 5c8:	9e e4       	ldi	r25, 0x4E	; 78
 5ca:	01 97       	sbiw	r24, 0x01	; 1
 5cc:	f1 f7       	brne	.-4      	; 0x5ca <LCD_Init+0x2e>
 5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <LCD_Init+0x34>
 5d0:	00 00       	nop
 5d2:	08 95       	ret

000005d4 <LCD_WriteChar>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_WriteChar(uint8 Data)
{
 5d4:	cf 93       	push	r28
 5d6:	c8 2f       	mov	r28, r24
	DIO_WriteChannel(LCD_RS_PIN , PIN_HIGH);
 5d8:	61 e0       	ldi	r22, 0x01	; 1
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_E_PIN , PIN_LOW);
 5e0:	60 e0       	ldi	r22, 0x00	; 0
 5e2:	82 e0       	ldi	r24, 0x02	; 2
 5e4:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_D4_PIN , GET_BIT(Data , 4));
 5e8:	c4 fb       	bst	r28, 4
 5ea:	66 27       	eor	r22, r22
 5ec:	60 f9       	bld	r22, 0
 5ee:	83 e0       	ldi	r24, 0x03	; 3
 5f0:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D5_PIN , GET_BIT(Data , 5));
 5f4:	c5 fb       	bst	r28, 5
 5f6:	66 27       	eor	r22, r22
 5f8:	60 f9       	bld	r22, 0
 5fa:	84 e0       	ldi	r24, 0x04	; 4
 5fc:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D6_PIN , GET_BIT(Data , 6));
 600:	c6 fb       	bst	r28, 6
 602:	66 27       	eor	r22, r22
 604:	60 f9       	bld	r22, 0
 606:	85 e0       	ldi	r24, 0x05	; 5
 608:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D7_PIN , GET_BIT(Data , 7));
 60c:	6c 2f       	mov	r22, r28
 60e:	66 1f       	adc	r22, r22
 610:	66 27       	eor	r22, r22
 612:	66 1f       	adc	r22, r22
 614:	86 e0       	ldi	r24, 0x06	; 6
 616:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_E_PIN , PIN_HIGH);
 61a:	61 e0       	ldi	r22, 0x01	; 1
 61c:	82 e0       	ldi	r24, 0x02	; 2
 61e:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
 622:	8f e9       	ldi	r24, 0x9F	; 159
 624:	9f e0       	ldi	r25, 0x0F	; 15
 626:	01 97       	sbiw	r24, 0x01	; 1
 628:	f1 f7       	brne	.-4      	; 0x626 <LCD_WriteChar+0x52>
 62a:	00 c0       	rjmp	.+0      	; 0x62c <LCD_WriteChar+0x58>
 62c:	00 00       	nop
	_delay_ms(1);
	DIO_WriteChannel(LCD_E_PIN , PIN_LOW);
 62e:	60 e0       	ldi	r22, 0x00	; 0
 630:	82 e0       	ldi	r24, 0x02	; 2
 632:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_D4_PIN , GET_BIT(Data , 0));
 636:	6c 2f       	mov	r22, r28
 638:	61 70       	andi	r22, 0x01	; 1
 63a:	83 e0       	ldi	r24, 0x03	; 3
 63c:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D5_PIN , GET_BIT(Data , 1));
 640:	c1 fb       	bst	r28, 1
 642:	66 27       	eor	r22, r22
 644:	60 f9       	bld	r22, 0
 646:	84 e0       	ldi	r24, 0x04	; 4
 648:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D6_PIN , GET_BIT(Data , 2));
 64c:	c2 fb       	bst	r28, 2
 64e:	66 27       	eor	r22, r22
 650:	60 f9       	bld	r22, 0
 652:	85 e0       	ldi	r24, 0x05	; 5
 654:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D7_PIN , GET_BIT(Data , 3));
 658:	c3 fb       	bst	r28, 3
 65a:	66 27       	eor	r22, r22
 65c:	60 f9       	bld	r22, 0
 65e:	86 e0       	ldi	r24, 0x06	; 6
 660:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_E_PIN , PIN_HIGH);
 664:	61 e0       	ldi	r22, 0x01	; 1
 666:	82 e0       	ldi	r24, 0x02	; 2
 668:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
 66c:	8f e9       	ldi	r24, 0x9F	; 159
 66e:	9f e0       	ldi	r25, 0x0F	; 15
 670:	01 97       	sbiw	r24, 0x01	; 1
 672:	f1 f7       	brne	.-4      	; 0x670 <LCD_WriteChar+0x9c>
 674:	00 c0       	rjmp	.+0      	; 0x676 <LCD_WriteChar+0xa2>
 676:	00 00       	nop
	_delay_ms(1);
	DIO_WriteChannel(LCD_E_PIN , PIN_LOW);
 678:	60 e0       	ldi	r22, 0x00	; 0
 67a:	82 e0       	ldi	r24, 0x02	; 2
 67c:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
 680:	8f e1       	ldi	r24, 0x1F	; 31
 682:	9e e4       	ldi	r25, 0x4E	; 78
 684:	01 97       	sbiw	r24, 0x01	; 1
 686:	f1 f7       	brne	.-4      	; 0x684 <LCD_WriteChar+0xb0>
 688:	00 c0       	rjmp	.+0      	; 0x68a <LCD_WriteChar+0xb6>
 68a:	00 00       	nop
	
	_delay_ms(5);
}
 68c:	cf 91       	pop	r28
 68e:	08 95       	ret

00000690 <LCD_WriteString>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_WriteString(uint8* str)
{
 690:	0f 93       	push	r16
 692:	1f 93       	push	r17
 694:	cf 93       	push	r28
 696:	fc 01       	movw	r30, r24
	uint8 i=0;
	while(str[i]!='\0')
 698:	80 81       	ld	r24, Z
 69a:	88 23       	and	r24, r24
 69c:	59 f0       	breq	.+22     	; 0x6b4 <LCD_WriteString+0x24>
 69e:	8f 01       	movw	r16, r30
 6a0:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_WriteChar(str[i]);
 6a2:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LCD_WriteChar>
		i++;
 6a6:	cf 5f       	subi	r28, 0xFF	; 255
*                                    E_NOT_OK
*******************************************************************************/
void LCD_WriteString(uint8* str)
{
	uint8 i=0;
	while(str[i]!='\0')
 6a8:	f8 01       	movw	r30, r16
 6aa:	ec 0f       	add	r30, r28
 6ac:	f1 1d       	adc	r31, r1
 6ae:	80 81       	ld	r24, Z
 6b0:	81 11       	cpse	r24, r1
 6b2:	f7 cf       	rjmp	.-18     	; 0x6a2 <LCD_WriteString+0x12>
 6b4:	8f e1       	ldi	r24, 0x1F	; 31
 6b6:	9e e4       	ldi	r25, 0x4E	; 78
 6b8:	01 97       	sbiw	r24, 0x01	; 1
 6ba:	f1 f7       	brne	.-4      	; 0x6b8 <LCD_WriteString+0x28>
 6bc:	00 c0       	rjmp	.+0      	; 0x6be <LCD_WriteString+0x2e>
 6be:	00 00       	nop
	{
		LCD_WriteChar(str[i]);
		i++;
	}
	_delay_ms(5);
}
 6c0:	cf 91       	pop	r28
 6c2:	1f 91       	pop	r17
 6c4:	0f 91       	pop	r16
 6c6:	08 95       	ret

000006c8 <LCD_WriteInteger>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_WriteInteger(sint32 num)
{
 6c8:	8f 92       	push	r8
 6ca:	9f 92       	push	r9
 6cc:	af 92       	push	r10
 6ce:	bf 92       	push	r11
 6d0:	cf 92       	push	r12
 6d2:	df 92       	push	r13
 6d4:	ef 92       	push	r14
 6d6:	ff 92       	push	r15
 6d8:	0f 93       	push	r16
 6da:	1f 93       	push	r17
 6dc:	8b 01       	movw	r16, r22
 6de:	9c 01       	movw	r18, r24
	 sint32 temp = 1;
	 if(num == 0)
 6e0:	61 15       	cp	r22, r1
 6e2:	71 05       	cpc	r23, r1
 6e4:	81 05       	cpc	r24, r1
 6e6:	91 05       	cpc	r25, r1
 6e8:	21 f4       	brne	.+8      	; 0x6f2 <LCD_WriteInteger+0x2a>
	 {
		 LCD_WriteChar('0');
 6ea:	80 e3       	ldi	r24, 0x30	; 48
 6ec:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LCD_WriteChar>
 6f0:	5f c0       	rjmp	.+190    	; 0x7b0 <LCD_WriteInteger+0xe8>
	 }

	 else if(num < 0)
 6f2:	99 23       	and	r25, r25
 6f4:	34 f0       	brlt	.+12     	; 0x702 <LCD_WriteInteger+0x3a>
		 num *= -1;
	 }

	 else{
		 
		 while(num > 0)
 6f6:	16 16       	cp	r1, r22
 6f8:	17 06       	cpc	r1, r23
 6fa:	18 06       	cpc	r1, r24
 6fc:	19 06       	cpc	r1, r25
 6fe:	2c f0       	brlt	.+10     	; 0x70a <LCD_WriteInteger+0x42>
 700:	57 c0       	rjmp	.+174    	; 0x7b0 <LCD_WriteInteger+0xe8>
		 LCD_WriteChar('0');
	 }

	 else if(num < 0)
	 {
		 LCD_WriteChar('-');
 702:	8d e2       	ldi	r24, 0x2D	; 45
 704:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LCD_WriteChar>
 708:	53 c0       	rjmp	.+166    	; 0x7b0 <LCD_WriteInteger+0xe8>
		 num *= -1;
	 }

	 else{
		 
		 while(num > 0)
 70a:	61 e0       	ldi	r22, 0x01	; 1
 70c:	70 e0       	ldi	r23, 0x00	; 0
 70e:	80 e0       	ldi	r24, 0x00	; 0
 710:	90 e0       	ldi	r25, 0x00	; 0
		 {
			 temp = ((temp*10) + (num%10));
 712:	0f 2e       	mov	r0, r31
 714:	fa e0       	ldi	r31, 0x0A	; 10
 716:	8f 2e       	mov	r8, r31
 718:	91 2c       	mov	r9, r1
 71a:	a1 2c       	mov	r10, r1
 71c:	b1 2c       	mov	r11, r1
 71e:	f0 2d       	mov	r31, r0
 720:	dc 01       	movw	r26, r24
 722:	cb 01       	movw	r24, r22
 724:	88 0f       	add	r24, r24
 726:	99 1f       	adc	r25, r25
 728:	aa 1f       	adc	r26, r26
 72a:	bb 1f       	adc	r27, r27
 72c:	6c 01       	movw	r12, r24
 72e:	7d 01       	movw	r14, r26
 730:	cc 0c       	add	r12, r12
 732:	dd 1c       	adc	r13, r13
 734:	ee 1c       	adc	r14, r14
 736:	ff 1c       	adc	r15, r15
 738:	cc 0c       	add	r12, r12
 73a:	dd 1c       	adc	r13, r13
 73c:	ee 1c       	adc	r14, r14
 73e:	ff 1c       	adc	r15, r15
 740:	c8 0e       	add	r12, r24
 742:	d9 1e       	adc	r13, r25
 744:	ea 1e       	adc	r14, r26
 746:	fb 1e       	adc	r15, r27
 748:	c9 01       	movw	r24, r18
 74a:	b8 01       	movw	r22, r16
 74c:	a5 01       	movw	r20, r10
 74e:	94 01       	movw	r18, r8
 750:	0e 94 22 05 	call	0xa44	; 0xa44 <__divmodsi4>
 754:	6c 0d       	add	r22, r12
 756:	7d 1d       	adc	r23, r13
 758:	8e 1d       	adc	r24, r14
 75a:	9f 1d       	adc	r25, r15
			 num /= 10;
 75c:	02 2f       	mov	r16, r18
 75e:	13 2f       	mov	r17, r19
 760:	24 2f       	mov	r18, r20
 762:	35 2f       	mov	r19, r21
		 num *= -1;
	 }

	 else{
		 
		 while(num > 0)
 764:	10 16       	cp	r1, r16
 766:	11 06       	cpc	r1, r17
 768:	12 06       	cpc	r1, r18
 76a:	13 06       	cpc	r1, r19
 76c:	cc f2       	brlt	.-78     	; 0x720 <LCD_WriteInteger+0x58>
		 {
			 temp = ((temp*10) + (num%10));
			 num /= 10;
		 }

		 while(temp > 1 )
 76e:	62 30       	cpi	r22, 0x02	; 2
 770:	71 05       	cpc	r23, r1
 772:	81 05       	cpc	r24, r1
 774:	91 05       	cpc	r25, r1
 776:	e4 f0       	brlt	.+56     	; 0x7b0 <LCD_WriteInteger+0xe8>
		 {
			 LCD_WriteChar(((temp%10)+48));
 778:	0f 2e       	mov	r0, r31
 77a:	fa e0       	ldi	r31, 0x0A	; 10
 77c:	8f 2e       	mov	r8, r31
 77e:	91 2c       	mov	r9, r1
 780:	a1 2c       	mov	r10, r1
 782:	b1 2c       	mov	r11, r1
 784:	f0 2d       	mov	r31, r0
 786:	a5 01       	movw	r20, r10
 788:	94 01       	movw	r18, r8
 78a:	0e 94 22 05 	call	0xa44	; 0xa44 <__divmodsi4>
 78e:	e2 2e       	mov	r14, r18
 790:	f3 2e       	mov	r15, r19
 792:	04 2f       	mov	r16, r20
 794:	15 2f       	mov	r17, r21
 796:	80 e3       	ldi	r24, 0x30	; 48
 798:	86 0f       	add	r24, r22
 79a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LCD_WriteChar>
			 temp /= 10;
 79e:	6e 2d       	mov	r22, r14
 7a0:	7f 2d       	mov	r23, r15
 7a2:	80 2f       	mov	r24, r16
 7a4:	91 2f       	mov	r25, r17
		 {
			 temp = ((temp*10) + (num%10));
			 num /= 10;
		 }

		 while(temp > 1 )
 7a6:	62 30       	cpi	r22, 0x02	; 2
 7a8:	71 05       	cpc	r23, r1
 7aa:	81 05       	cpc	r24, r1
 7ac:	91 05       	cpc	r25, r1
 7ae:	5c f7       	brge	.-42     	; 0x786 <LCD_WriteInteger+0xbe>
 7b0:	8f e1       	ldi	r24, 0x1F	; 31
 7b2:	9e e4       	ldi	r25, 0x4E	; 78
 7b4:	01 97       	sbiw	r24, 0x01	; 1
 7b6:	f1 f7       	brne	.-4      	; 0x7b4 <LCD_WriteInteger+0xec>
 7b8:	00 c0       	rjmp	.+0      	; 0x7ba <LCD_WriteInteger+0xf2>
 7ba:	00 00       	nop
			 LCD_WriteChar(((temp%10)+48));
			 temp /= 10;
		 }
	 }
	 _delay_ms(5);
}
 7bc:	1f 91       	pop	r17
 7be:	0f 91       	pop	r16
 7c0:	ff 90       	pop	r15
 7c2:	ef 90       	pop	r14
 7c4:	df 90       	pop	r13
 7c6:	cf 90       	pop	r12
 7c8:	bf 90       	pop	r11
 7ca:	af 90       	pop	r10
 7cc:	9f 90       	pop	r9
 7ce:	8f 90       	pop	r8
 7d0:	08 95       	ret

000007d2 <LCD_GoTo>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_GoTo(uint8 Row, uint8 Column)
{
 7d2:	cf 93       	push	r28
 7d4:	df 93       	push	r29
 7d6:	00 d0       	rcall	.+0      	; 0x7d8 <LCD_GoTo+0x6>
 7d8:	cd b7       	in	r28, 0x3d	; 61
 7da:	de b7       	in	r29, 0x3e	; 62
	uint8 LCD_Loc[2]={0X80 , 0XC0};
 7dc:	90 e8       	ldi	r25, 0x80	; 128
 7de:	99 83       	std	Y+1, r25	; 0x01
 7e0:	90 ec       	ldi	r25, 0xC0	; 192
 7e2:	9a 83       	std	Y+2, r25	; 0x02
	LCD_WriteCommand(LCD_Loc[Row] + Column);
 7e4:	fe 01       	movw	r30, r28
 7e6:	e8 0f       	add	r30, r24
 7e8:	f1 1d       	adc	r31, r1
 7ea:	81 81       	ldd	r24, Z+1	; 0x01
 7ec:	86 0f       	add	r24, r22
 7ee:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_WriteCommand>
 7f2:	8f e1       	ldi	r24, 0x1F	; 31
 7f4:	9e e4       	ldi	r25, 0x4E	; 78
 7f6:	01 97       	sbiw	r24, 0x01	; 1
 7f8:	f1 f7       	brne	.-4      	; 0x7f6 <LCD_GoTo+0x24>
 7fa:	00 c0       	rjmp	.+0      	; 0x7fc <LCD_GoTo+0x2a>
 7fc:	00 00       	nop
	_delay_ms(5);
}
 7fe:	0f 90       	pop	r0
 800:	0f 90       	pop	r0
 802:	df 91       	pop	r29
 804:	cf 91       	pop	r28
 806:	08 95       	ret

00000808 <LCD_Clear>:
*                                    E_NOT_OK
*******************************************************************************/
void LCD_Clear(void)
{
	//command to clear LCD
	LCD_WriteCommand(0X01);
 808:	81 e0       	ldi	r24, 0x01	; 1
 80a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_WriteCommand>
 80e:	8f e1       	ldi	r24, 0x1F	; 31
 810:	9e e4       	ldi	r25, 0x4E	; 78
 812:	01 97       	sbiw	r24, 0x01	; 1
 814:	f1 f7       	brne	.-4      	; 0x812 <LCD_Clear+0xa>
 816:	00 c0       	rjmp	.+0      	; 0x818 <LCD_Clear+0x10>
 818:	00 00       	nop
 81a:	08 95       	ret

0000081c <LED_ON>:
	#if (SELECTED_LED == RED_LED)
	DIO_WriteChannel(PORTC_PIN0 , PIN_HIGH);
	#elif (SELECTED_LED == GREEN_LED)
	DIO_WriteChannel(PORTC_PIN1 , PIN_HIGH);
	#elif (SELECTED_LED == BLUE_LED)
	DIO_WriteChannel(PORTC_PIN2 , PIN_HIGH);
 81c:	61 e0       	ldi	r22, 0x01	; 1
 81e:	82 e1       	ldi	r24, 0x12	; 18
 820:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
 824:	08 95       	ret

00000826 <LED_OFF>:
	#if (SELECTED_LED == RED_LED)
	DIO_WriteChannel(PORTC_PIN0 , PIN_LOW);
	#elif (SELECTED_LED == GREEN_LED) 
	DIO_WriteChannel(PORTC_PIN1 , PIN_LOW);
	#elif (SELECTED_LED == BLUE_LED)  
	DIO_WriteChannel(PORTC_PIN2 , PIN_LOW);
 826:	60 e0       	ldi	r22, 0x00	; 0
 828:	82 e1       	ldi	r24, 0x12	; 18
 82a:	0e 94 18 04 	call	0x830	; 0x830 <DIO_WriteChannel>
 82e:	08 95       	ret

00000830 <DIO_WriteChannel>:
*                                    E_NOT_OK
*******************************************************************************/
void DIO_WriteChannel (uint8 Pin_Order, PIN_VAL_e Pin_Val)
{
	uint8 PORT =0, PIN=0 ;
	PORT= Pin_Order / NUMBER_OF_PORT_PINS;
 830:	98 2f       	mov	r25, r24
 832:	96 95       	lsr	r25
 834:	96 95       	lsr	r25
 836:	96 95       	lsr	r25
	PIN=  Pin_Order  % NUMBER_OF_PORT_PINS;
 838:	87 70       	andi	r24, 0x07	; 7
	
	switch (Pin_Val)
 83a:	66 23       	and	r22, r22
 83c:	09 f4       	brne	.+2      	; 0x840 <DIO_WriteChannel+0x10>
 83e:	3f c0       	rjmp	.+126    	; 0x8be <__stack+0x5f>
 840:	61 30       	cpi	r22, 0x01	; 1
 842:	09 f0       	breq	.+2      	; 0x846 <DIO_WriteChannel+0x16>
 844:	7b c0       	rjmp	.+246    	; 0x93c <__stack+0xdd>
	{
		case PIN_HIGH :
		switch(PORT)
 846:	91 30       	cpi	r25, 0x01	; 1
 848:	99 f0       	breq	.+38     	; 0x870 <__stack+0x11>
 84a:	28 f0       	brcs	.+10     	; 0x856 <DIO_WriteChannel+0x26>
 84c:	92 30       	cpi	r25, 0x02	; 2
 84e:	e9 f0       	breq	.+58     	; 0x88a <__stack+0x2b>
 850:	93 30       	cpi	r25, 0x03	; 3
 852:	41 f1       	breq	.+80     	; 0x8a4 <__stack+0x45>
 854:	08 95       	ret
		{
			case 0:
			SET_BIT (PORTA , PIN);
 856:	4b b3       	in	r20, 0x1b	; 27
 858:	21 e0       	ldi	r18, 0x01	; 1
 85a:	30 e0       	ldi	r19, 0x00	; 0
 85c:	b9 01       	movw	r22, r18
 85e:	02 c0       	rjmp	.+4      	; 0x864 <__stack+0x5>
 860:	66 0f       	add	r22, r22
 862:	77 1f       	adc	r23, r23
 864:	8a 95       	dec	r24
 866:	e2 f7       	brpl	.-8      	; 0x860 <__stack+0x1>
 868:	cb 01       	movw	r24, r22
 86a:	84 2b       	or	r24, r20
 86c:	8b bb       	out	0x1b, r24	; 27
			break;
 86e:	08 95       	ret
			case 1:
			SET_BIT (PORTB , PIN);
 870:	48 b3       	in	r20, 0x18	; 24
 872:	21 e0       	ldi	r18, 0x01	; 1
 874:	30 e0       	ldi	r19, 0x00	; 0
 876:	b9 01       	movw	r22, r18
 878:	02 c0       	rjmp	.+4      	; 0x87e <__stack+0x1f>
 87a:	66 0f       	add	r22, r22
 87c:	77 1f       	adc	r23, r23
 87e:	8a 95       	dec	r24
 880:	e2 f7       	brpl	.-8      	; 0x87a <__stack+0x1b>
 882:	cb 01       	movw	r24, r22
 884:	84 2b       	or	r24, r20
 886:	88 bb       	out	0x18, r24	; 24
			break;
 888:	08 95       	ret
			case 2:
			SET_BIT (PORTC , PIN);
 88a:	45 b3       	in	r20, 0x15	; 21
 88c:	21 e0       	ldi	r18, 0x01	; 1
 88e:	30 e0       	ldi	r19, 0x00	; 0
 890:	b9 01       	movw	r22, r18
 892:	02 c0       	rjmp	.+4      	; 0x898 <__stack+0x39>
 894:	66 0f       	add	r22, r22
 896:	77 1f       	adc	r23, r23
 898:	8a 95       	dec	r24
 89a:	e2 f7       	brpl	.-8      	; 0x894 <__stack+0x35>
 89c:	cb 01       	movw	r24, r22
 89e:	84 2b       	or	r24, r20
 8a0:	85 bb       	out	0x15, r24	; 21
			break;
 8a2:	08 95       	ret
			case 3:
			SET_BIT (PORTD , PIN);
 8a4:	42 b3       	in	r20, 0x12	; 18
 8a6:	21 e0       	ldi	r18, 0x01	; 1
 8a8:	30 e0       	ldi	r19, 0x00	; 0
 8aa:	b9 01       	movw	r22, r18
 8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <__stack+0x53>
 8ae:	66 0f       	add	r22, r22
 8b0:	77 1f       	adc	r23, r23
 8b2:	8a 95       	dec	r24
 8b4:	e2 f7       	brpl	.-8      	; 0x8ae <__stack+0x4f>
 8b6:	cb 01       	movw	r24, r22
 8b8:	84 2b       	or	r24, r20
 8ba:	82 bb       	out	0x12, r24	; 18
			break;
 8bc:	08 95       	ret
			break;
		}
		break;
		
		case PIN_LOW :
		switch(PORT)
 8be:	91 30       	cpi	r25, 0x01	; 1
 8c0:	a1 f0       	breq	.+40     	; 0x8ea <__stack+0x8b>
 8c2:	28 f0       	brcs	.+10     	; 0x8ce <__stack+0x6f>
 8c4:	92 30       	cpi	r25, 0x02	; 2
 8c6:	f9 f0       	breq	.+62     	; 0x906 <__stack+0xa7>
 8c8:	93 30       	cpi	r25, 0x03	; 3
 8ca:	59 f1       	breq	.+86     	; 0x922 <__stack+0xc3>
 8cc:	08 95       	ret
		{
			case 0:
			CLR_BIT (PORTA , PIN);
 8ce:	4b b3       	in	r20, 0x1b	; 27
 8d0:	21 e0       	ldi	r18, 0x01	; 1
 8d2:	30 e0       	ldi	r19, 0x00	; 0
 8d4:	b9 01       	movw	r22, r18
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <__stack+0x7d>
 8d8:	66 0f       	add	r22, r22
 8da:	77 1f       	adc	r23, r23
 8dc:	8a 95       	dec	r24
 8de:	e2 f7       	brpl	.-8      	; 0x8d8 <__stack+0x79>
 8e0:	cb 01       	movw	r24, r22
 8e2:	80 95       	com	r24
 8e4:	84 23       	and	r24, r20
 8e6:	8b bb       	out	0x1b, r24	; 27
			break;
 8e8:	08 95       	ret
			case 1:
			CLR_BIT (PORTB , PIN);
 8ea:	48 b3       	in	r20, 0x18	; 24
 8ec:	21 e0       	ldi	r18, 0x01	; 1
 8ee:	30 e0       	ldi	r19, 0x00	; 0
 8f0:	b9 01       	movw	r22, r18
 8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <__stack+0x99>
 8f4:	66 0f       	add	r22, r22
 8f6:	77 1f       	adc	r23, r23
 8f8:	8a 95       	dec	r24
 8fa:	e2 f7       	brpl	.-8      	; 0x8f4 <__stack+0x95>
 8fc:	cb 01       	movw	r24, r22
 8fe:	80 95       	com	r24
 900:	84 23       	and	r24, r20
 902:	88 bb       	out	0x18, r24	; 24
			break;
 904:	08 95       	ret
			case 2:
			CLR_BIT (PORTC , PIN);
 906:	45 b3       	in	r20, 0x15	; 21
 908:	21 e0       	ldi	r18, 0x01	; 1
 90a:	30 e0       	ldi	r19, 0x00	; 0
 90c:	b9 01       	movw	r22, r18
 90e:	02 c0       	rjmp	.+4      	; 0x914 <__stack+0xb5>
 910:	66 0f       	add	r22, r22
 912:	77 1f       	adc	r23, r23
 914:	8a 95       	dec	r24
 916:	e2 f7       	brpl	.-8      	; 0x910 <__stack+0xb1>
 918:	cb 01       	movw	r24, r22
 91a:	80 95       	com	r24
 91c:	84 23       	and	r24, r20
 91e:	85 bb       	out	0x15, r24	; 21
			break;
 920:	08 95       	ret
			case 3:
			CLR_BIT (PORTD , PIN);
 922:	42 b3       	in	r20, 0x12	; 18
 924:	21 e0       	ldi	r18, 0x01	; 1
 926:	30 e0       	ldi	r19, 0x00	; 0
 928:	b9 01       	movw	r22, r18
 92a:	02 c0       	rjmp	.+4      	; 0x930 <__stack+0xd1>
 92c:	66 0f       	add	r22, r22
 92e:	77 1f       	adc	r23, r23
 930:	8a 95       	dec	r24
 932:	e2 f7       	brpl	.-8      	; 0x92c <__stack+0xcd>
 934:	cb 01       	movw	r24, r22
 936:	80 95       	com	r24
 938:	84 23       	and	r24, r20
 93a:	82 bb       	out	0x12, r24	; 18
 93c:	08 95       	ret

0000093e <PORT_Init>:
 */ 

#include "PORT_Core.h"

void PORT_Init(void)
{
 93e:	e0 e6       	ldi	r30, 0x60	; 96
 940:	f0 e0       	ldi	r31, 0x00	; 0
 942:	46 e7       	ldi	r20, 0x76	; 118
 944:	50 e0       	ldi	r21, 0x00	; 0
					case PORT_A:
					     CLR_BIT(DDRA , PIN);
					break;
					
					case PORT_B:
					     CLR_BIT(DDRB , PIN);
 946:	61 e0       	ldi	r22, 0x01	; 1
 948:	70 e0       	ldi	r23, 0x00	; 0
void PORT_Init(void)
{
	uint8 cntr=0 , PORT=0 , PIN =0 , DIR= 0;
	for(cntr = 0 ; cntr < DEFINED_PINS ; cntr++ )
	{
		PORT = PORT_Initialization[cntr].PIN_NUM/NUMBER_OF_PORT_PINS;
 94a:	80 81       	ld	r24, Z
 94c:	98 2f       	mov	r25, r24
 94e:	96 95       	lsr	r25
 950:	96 95       	lsr	r25
 952:	96 95       	lsr	r25
		PIN =  PORT_Initialization[cntr].PIN_NUM%NUMBER_OF_PORT_PINS;
 954:	87 70       	andi	r24, 0x07	; 7
		DIR =  PORT_Initialization[cntr].DIR;
		
		switch (DIR)
 956:	21 81       	ldd	r18, Z+1	; 0x01
 958:	22 23       	and	r18, r18
 95a:	19 f0       	breq	.+6      	; 0x962 <PORT_Init+0x24>
 95c:	21 30       	cpi	r18, 0x01	; 1
 95e:	c9 f1       	breq	.+114    	; 0x9d2 <PORT_Init+0x94>
 960:	6b c0       	rjmp	.+214    	; 0xa38 <PORT_Init+0xfa>
		{
			case PIN_DIR_INPUT :
			    switch (PORT)
 962:	91 30       	cpi	r25, 0x01	; 1
 964:	91 f0       	breq	.+36     	; 0x98a <PORT_Init+0x4c>
 966:	28 f0       	brcs	.+10     	; 0x972 <PORT_Init+0x34>
 968:	92 30       	cpi	r25, 0x02	; 2
 96a:	d9 f0       	breq	.+54     	; 0x9a2 <PORT_Init+0x64>
 96c:	93 30       	cpi	r25, 0x03	; 3
 96e:	29 f1       	breq	.+74     	; 0x9ba <PORT_Init+0x7c>
 970:	63 c0       	rjmp	.+198    	; 0xa38 <PORT_Init+0xfa>
				{
					case PORT_A:
					     CLR_BIT(DDRA , PIN);
 972:	9a b3       	in	r25, 0x1a	; 26
 974:	9b 01       	movw	r18, r22
 976:	02 c0       	rjmp	.+4      	; 0x97c <PORT_Init+0x3e>
 978:	22 0f       	add	r18, r18
 97a:	33 1f       	adc	r19, r19
 97c:	8a 95       	dec	r24
 97e:	e2 f7       	brpl	.-8      	; 0x978 <PORT_Init+0x3a>
 980:	82 2f       	mov	r24, r18
 982:	80 95       	com	r24
 984:	89 23       	and	r24, r25
 986:	8a bb       	out	0x1a, r24	; 26
					break;
 988:	57 c0       	rjmp	.+174    	; 0xa38 <PORT_Init+0xfa>
					
					case PORT_B:
					     CLR_BIT(DDRB , PIN);
 98a:	97 b3       	in	r25, 0x17	; 23
 98c:	9b 01       	movw	r18, r22
 98e:	02 c0       	rjmp	.+4      	; 0x994 <PORT_Init+0x56>
 990:	22 0f       	add	r18, r18
 992:	33 1f       	adc	r19, r19
 994:	8a 95       	dec	r24
 996:	e2 f7       	brpl	.-8      	; 0x990 <PORT_Init+0x52>
 998:	82 2f       	mov	r24, r18
 99a:	80 95       	com	r24
 99c:	89 23       	and	r24, r25
 99e:	87 bb       	out	0x17, r24	; 23
					break;
 9a0:	4b c0       	rjmp	.+150    	; 0xa38 <PORT_Init+0xfa>
					
					case PORT_C:
					     CLR_BIT(DDRC , PIN);
 9a2:	94 b3       	in	r25, 0x14	; 20
 9a4:	9b 01       	movw	r18, r22
 9a6:	02 c0       	rjmp	.+4      	; 0x9ac <PORT_Init+0x6e>
 9a8:	22 0f       	add	r18, r18
 9aa:	33 1f       	adc	r19, r19
 9ac:	8a 95       	dec	r24
 9ae:	e2 f7       	brpl	.-8      	; 0x9a8 <PORT_Init+0x6a>
 9b0:	82 2f       	mov	r24, r18
 9b2:	80 95       	com	r24
 9b4:	89 23       	and	r24, r25
 9b6:	84 bb       	out	0x14, r24	; 20
					break;
 9b8:	3f c0       	rjmp	.+126    	; 0xa38 <PORT_Init+0xfa>
					
					case PORT_D:
					     CLR_BIT(DDRD , PIN);
 9ba:	91 b3       	in	r25, 0x11	; 17
 9bc:	9b 01       	movw	r18, r22
 9be:	02 c0       	rjmp	.+4      	; 0x9c4 <PORT_Init+0x86>
 9c0:	22 0f       	add	r18, r18
 9c2:	33 1f       	adc	r19, r19
 9c4:	8a 95       	dec	r24
 9c6:	e2 f7       	brpl	.-8      	; 0x9c0 <PORT_Init+0x82>
 9c8:	82 2f       	mov	r24, r18
 9ca:	80 95       	com	r24
 9cc:	89 23       	and	r24, r25
 9ce:	81 bb       	out	0x11, r24	; 17
					break;
 9d0:	33 c0       	rjmp	.+102    	; 0xa38 <PORT_Init+0xfa>
					break;
				}
			break;
			
			case PIN_DIR_OUTPUT :
			    switch (PORT)
 9d2:	91 30       	cpi	r25, 0x01	; 1
 9d4:	89 f0       	breq	.+34     	; 0x9f8 <PORT_Init+0xba>
 9d6:	28 f0       	brcs	.+10     	; 0x9e2 <PORT_Init+0xa4>
 9d8:	92 30       	cpi	r25, 0x02	; 2
 9da:	c9 f0       	breq	.+50     	; 0xa0e <PORT_Init+0xd0>
 9dc:	93 30       	cpi	r25, 0x03	; 3
 9de:	11 f1       	breq	.+68     	; 0xa24 <PORT_Init+0xe6>
 9e0:	2b c0       	rjmp	.+86     	; 0xa38 <PORT_Init+0xfa>
			    {
				    case PORT_A:
				    SET_BIT(DDRA , PIN);
 9e2:	2a b3       	in	r18, 0x1a	; 26
 9e4:	db 01       	movw	r26, r22
 9e6:	02 c0       	rjmp	.+4      	; 0x9ec <PORT_Init+0xae>
 9e8:	aa 0f       	add	r26, r26
 9ea:	bb 1f       	adc	r27, r27
 9ec:	8a 95       	dec	r24
 9ee:	e2 f7       	brpl	.-8      	; 0x9e8 <PORT_Init+0xaa>
 9f0:	cd 01       	movw	r24, r26
 9f2:	82 2b       	or	r24, r18
 9f4:	8a bb       	out	0x1a, r24	; 26
				    break;
 9f6:	20 c0       	rjmp	.+64     	; 0xa38 <PORT_Init+0xfa>
				    
				    case PORT_B:
				    SET_BIT(DDRB , PIN);
 9f8:	27 b3       	in	r18, 0x17	; 23
 9fa:	db 01       	movw	r26, r22
 9fc:	02 c0       	rjmp	.+4      	; 0xa02 <PORT_Init+0xc4>
 9fe:	aa 0f       	add	r26, r26
 a00:	bb 1f       	adc	r27, r27
 a02:	8a 95       	dec	r24
 a04:	e2 f7       	brpl	.-8      	; 0x9fe <PORT_Init+0xc0>
 a06:	cd 01       	movw	r24, r26
 a08:	82 2b       	or	r24, r18
 a0a:	87 bb       	out	0x17, r24	; 23
				    break;
 a0c:	15 c0       	rjmp	.+42     	; 0xa38 <PORT_Init+0xfa>
				    
				    case PORT_C:
				    SET_BIT(DDRC , PIN);
 a0e:	24 b3       	in	r18, 0x14	; 20
 a10:	db 01       	movw	r26, r22
 a12:	02 c0       	rjmp	.+4      	; 0xa18 <PORT_Init+0xda>
 a14:	aa 0f       	add	r26, r26
 a16:	bb 1f       	adc	r27, r27
 a18:	8a 95       	dec	r24
 a1a:	e2 f7       	brpl	.-8      	; 0xa14 <PORT_Init+0xd6>
 a1c:	cd 01       	movw	r24, r26
 a1e:	82 2b       	or	r24, r18
 a20:	84 bb       	out	0x14, r24	; 20
				    break;
 a22:	0a c0       	rjmp	.+20     	; 0xa38 <PORT_Init+0xfa>
				    
				    case PORT_D:
				    SET_BIT(DDRD , PIN);
 a24:	21 b3       	in	r18, 0x11	; 17
 a26:	db 01       	movw	r26, r22
 a28:	02 c0       	rjmp	.+4      	; 0xa2e <PORT_Init+0xf0>
 a2a:	aa 0f       	add	r26, r26
 a2c:	bb 1f       	adc	r27, r27
 a2e:	8a 95       	dec	r24
 a30:	e2 f7       	brpl	.-8      	; 0xa2a <PORT_Init+0xec>
 a32:	cd 01       	movw	r24, r26
 a34:	82 2b       	or	r24, r18
 a36:	81 bb       	out	0x11, r24	; 17
 a38:	32 96       	adiw	r30, 0x02	; 2
#include "PORT_Core.h"

void PORT_Init(void)
{
	uint8 cntr=0 , PORT=0 , PIN =0 , DIR= 0;
	for(cntr = 0 ; cntr < DEFINED_PINS ; cntr++ )
 a3a:	e4 17       	cp	r30, r20
 a3c:	f5 07       	cpc	r31, r21
 a3e:	09 f0       	breq	.+2      	; 0xa42 <PORT_Init+0x104>
 a40:	84 cf       	rjmp	.-248    	; 0x94a <PORT_Init+0xc>
			
			default:
			break;
		}
	}
 a42:	08 95       	ret

00000a44 <__divmodsi4>:
 a44:	05 2e       	mov	r0, r21
 a46:	97 fb       	bst	r25, 7
 a48:	1e f4       	brtc	.+6      	; 0xa50 <__divmodsi4+0xc>
 a4a:	00 94       	com	r0
 a4c:	0e 94 39 05 	call	0xa72	; 0xa72 <__negsi2>
 a50:	57 fd       	sbrc	r21, 7
 a52:	07 d0       	rcall	.+14     	; 0xa62 <__divmodsi4_neg2>
 a54:	0e 94 41 05 	call	0xa82	; 0xa82 <__udivmodsi4>
 a58:	07 fc       	sbrc	r0, 7
 a5a:	03 d0       	rcall	.+6      	; 0xa62 <__divmodsi4_neg2>
 a5c:	4e f4       	brtc	.+18     	; 0xa70 <__divmodsi4_exit>
 a5e:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__negsi2>

00000a62 <__divmodsi4_neg2>:
 a62:	50 95       	com	r21
 a64:	40 95       	com	r20
 a66:	30 95       	com	r19
 a68:	21 95       	neg	r18
 a6a:	3f 4f       	sbci	r19, 0xFF	; 255
 a6c:	4f 4f       	sbci	r20, 0xFF	; 255
 a6e:	5f 4f       	sbci	r21, 0xFF	; 255

00000a70 <__divmodsi4_exit>:
 a70:	08 95       	ret

00000a72 <__negsi2>:
 a72:	90 95       	com	r25
 a74:	80 95       	com	r24
 a76:	70 95       	com	r23
 a78:	61 95       	neg	r22
 a7a:	7f 4f       	sbci	r23, 0xFF	; 255
 a7c:	8f 4f       	sbci	r24, 0xFF	; 255
 a7e:	9f 4f       	sbci	r25, 0xFF	; 255
 a80:	08 95       	ret

00000a82 <__udivmodsi4>:
 a82:	a1 e2       	ldi	r26, 0x21	; 33
 a84:	1a 2e       	mov	r1, r26
 a86:	aa 1b       	sub	r26, r26
 a88:	bb 1b       	sub	r27, r27
 a8a:	fd 01       	movw	r30, r26
 a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__udivmodsi4_ep>

00000a8e <__udivmodsi4_loop>:
 a8e:	aa 1f       	adc	r26, r26
 a90:	bb 1f       	adc	r27, r27
 a92:	ee 1f       	adc	r30, r30
 a94:	ff 1f       	adc	r31, r31
 a96:	a2 17       	cp	r26, r18
 a98:	b3 07       	cpc	r27, r19
 a9a:	e4 07       	cpc	r30, r20
 a9c:	f5 07       	cpc	r31, r21
 a9e:	20 f0       	brcs	.+8      	; 0xaa8 <__udivmodsi4_ep>
 aa0:	a2 1b       	sub	r26, r18
 aa2:	b3 0b       	sbc	r27, r19
 aa4:	e4 0b       	sbc	r30, r20
 aa6:	f5 0b       	sbc	r31, r21

00000aa8 <__udivmodsi4_ep>:
 aa8:	66 1f       	adc	r22, r22
 aaa:	77 1f       	adc	r23, r23
 aac:	88 1f       	adc	r24, r24
 aae:	99 1f       	adc	r25, r25
 ab0:	1a 94       	dec	r1
 ab2:	69 f7       	brne	.-38     	; 0xa8e <__udivmodsi4_loop>
 ab4:	60 95       	com	r22
 ab6:	70 95       	com	r23
 ab8:	80 95       	com	r24
 aba:	90 95       	com	r25
 abc:	9b 01       	movw	r18, r22
 abe:	ac 01       	movw	r20, r24
 ac0:	bd 01       	movw	r22, r26
 ac2:	cf 01       	movw	r24, r30
 ac4:	08 95       	ret

00000ac6 <_exit>:
 ac6:	f8 94       	cli

00000ac8 <__stop_program>:
 ac8:	ff cf       	rjmp	.-2      	; 0xac8 <__stop_program>
