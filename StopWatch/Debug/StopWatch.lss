
StopWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  00000b3e  00000bd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000b2  008000b2  00000c24  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000218b  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c3b  00000000  00000000  00002feb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000108f  00000000  00000000  00003c26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  00004cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a2  00000000  00000000  00004fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012b9  00000000  00000000  0000565e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00006917  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3b       	cpi	r26, 0xB2	; 178
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 eb       	ldi	r26, 0xB2	; 178
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3b       	cpi	r26, 0xB4	; 180
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "Stop_Watch.h"


int main(void)
{
   Project_Init();
  92:	0e 94 53 00 	call	0xa6	; 0xa6 <Project_Init>
   while (1)
   {
      App(); 
  96:	0e 94 25 02 	call	0x44a	; 0x44a <App>
  9a:	fd cf       	rjmp	.-6      	; 0x96 <main+0x4>

0000009c <Drivers_Init>:
		 Button4_Functionality();
	 }
}
void Drivers_Init (void)
{
	PORT_Init();
  9c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <PORT_Init>
	LCD_Init();
  a0:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <LCD_Init>
  a4:	08 95       	ret

000000a6 <Project_Init>:
}

void Project_Init (void)
{
	Drivers_Init();
  a6:	0e 94 4e 00 	call	0x9c	; 0x9c <Drivers_Init>
	LCD_GoTo(0,0);
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
	LCD_WriteString("StopWatch");
  b2:	8a e8       	ldi	r24, 0x8A	; 138
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 76 03 	call	0x6ec	; 0x6ec <LCD_WriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	87 ea       	ldi	r24, 0xA7	; 167
  be:	91 e6       	ldi	r25, 0x61	; 97
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <Project_Init+0x1a>
  c8:	00 c0       	rjmp	.+0      	; 0xca <Project_Init+0x24>
  ca:	00 00       	nop
	_delay_ms(2000);
	LCD_Clear();
  cc:	0e 94 3e 04 	call	0x87c	; 0x87c <LCD_Clear>
	LCD_GoTo(0,0);
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
	LCD_WriteString("Made By:");
  d8:	84 e9       	ldi	r24, 0x94	; 148
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 76 03 	call	0x6ec	; 0x6ec <LCD_WriteString>
	LCD_GoTo(1,0);
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
	LCD_WriteString("Ali Mamdoh");
  e8:	8d e9       	ldi	r24, 0x9D	; 157
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 76 03 	call	0x6ec	; 0x6ec <LCD_WriteString>
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	87 ea       	ldi	r24, 0xA7	; 167
  f4:	91 e6       	ldi	r25, 0x61	; 97
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <Project_Init+0x50>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <Project_Init+0x5a>
 100:	00 00       	nop
	_delay_ms(2000);
	LCD_Clear();
 102:	0e 94 3e 04 	call	0x87c	; 0x87c <LCD_Clear>
	LCD_GoTo(0,0);
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
	LCD_WriteString("MIN : SEC");
 10e:	88 ea       	ldi	r24, 0xA8	; 168
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 76 03 	call	0x6ec	; 0x6ec <LCD_WriteString>
	LCD_GoTo(1,0);
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
	LCD_WriteInteger(i);
 11e:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <i>
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 92 03 	call	0x724	; 0x724 <LCD_WriteInteger>
	LCD_GoTo(1,4);
 12c:	64 e0       	ldi	r22, 0x04	; 4
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
	LCD_WriteChar(':');
 134:	8a e3       	ldi	r24, 0x3A	; 58
 136:	0e 94 18 03 	call	0x630	; 0x630 <LCD_WriteChar>
	LCD_GoTo(1,6);
 13a:	66 e0       	ldi	r22, 0x06	; 6
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
	LCD_WriteInteger(j);
 142:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <__data_end>
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 92 03 	call	0x724	; 0x724 <LCD_WriteInteger>
 150:	08 95       	ret

00000152 <Button1_Functionality>:
}

void Button1_Functionality (void)
{
	LCD_Clear();
 152:	0e 94 3e 04 	call	0x87c	; 0x87c <LCD_Clear>
	i++;
 156:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <i>
 15a:	8f 5f       	subi	r24, 0xFF	; 255
 15c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <i>
	LCD_GoTo(0,0);
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
	LCD_WriteString("MIN : SEC");
 168:	88 ea       	ldi	r24, 0xA8	; 168
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 76 03 	call	0x6ec	; 0x6ec <LCD_WriteString>
	LCD_GoTo(1,0);
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
	LCD_WriteInteger(i);
 178:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <i>
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 92 03 	call	0x724	; 0x724 <LCD_WriteInteger>
	LCD_GoTo(1,4);
 186:	64 e0       	ldi	r22, 0x04	; 4
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
	LCD_WriteChar(':');
 18e:	8a e3       	ldi	r24, 0x3A	; 58
 190:	0e 94 18 03 	call	0x630	; 0x630 <LCD_WriteChar>
	LCD_GoTo(1,6);
 194:	66 e0       	ldi	r22, 0x06	; 6
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
	LCD_WriteInteger(j);
 19c:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <__data_end>
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 92 03 	call	0x724	; 0x724 <LCD_WriteInteger>
 1aa:	08 95       	ret

000001ac <Button2_Functionality>:
}

void Button2_Functionality (void)
{
	if (j<59) //Making Sure Seconds Don't exceed 59
 1ac:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__data_end>
 1b0:	8b 33       	cpi	r24, 0x3B	; 59
 1b2:	60 f5       	brcc	.+88     	; 0x20c <Button2_Functionality+0x60>
	{
		LCD_Clear();
 1b4:	0e 94 3e 04 	call	0x87c	; 0x87c <LCD_Clear>
		j++;
 1b8:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__data_end>
 1bc:	8f 5f       	subi	r24, 0xFF	; 255
 1be:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__data_end>
		LCD_GoTo(0,0);
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
		LCD_WriteString("MIN : SEC");
 1ca:	88 ea       	ldi	r24, 0xA8	; 168
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 76 03 	call	0x6ec	; 0x6ec <LCD_WriteString>
		LCD_GoTo(1,0);
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
		LCD_WriteInteger(i);
 1da:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <i>
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 92 03 	call	0x724	; 0x724 <LCD_WriteInteger>
		LCD_GoTo(1,4);
 1e8:	64 e0       	ldi	r22, 0x04	; 4
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
		LCD_WriteChar(':');
 1f0:	8a e3       	ldi	r24, 0x3A	; 58
 1f2:	0e 94 18 03 	call	0x630	; 0x630 <LCD_WriteChar>
		LCD_GoTo(1,6);
 1f6:	66 e0       	ldi	r22, 0x06	; 6
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
		LCD_WriteInteger(j);
 1fe:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <__data_end>
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 92 03 	call	0x724	; 0x724 <LCD_WriteInteger>
 20c:	08 95       	ret

0000020e <Button4_Functionality>:
	}
}

void Button4_Functionality (void)
{
	LCD_Clear();
 20e:	0e 94 3e 04 	call	0x87c	; 0x87c <LCD_Clear>
	i=0;
 212:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <i>
	j=0;
 216:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__data_end>
	LCD_GoTo(0,0);
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
	LCD_WriteString("MIN : SEC");
 222:	88 ea       	ldi	r24, 0xA8	; 168
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 76 03 	call	0x6ec	; 0x6ec <LCD_WriteString>
	LCD_GoTo(1,0);
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
	LCD_WriteInteger(i);
 232:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <i>
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 92 03 	call	0x724	; 0x724 <LCD_WriteInteger>
	LCD_GoTo(1,4);
 240:	64 e0       	ldi	r22, 0x04	; 4
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
	LCD_WriteChar(':');
 248:	8a e3       	ldi	r24, 0x3A	; 58
 24a:	0e 94 18 03 	call	0x630	; 0x630 <LCD_WriteChar>
	LCD_GoTo(1,6);
 24e:	66 e0       	ldi	r22, 0x06	; 6
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
	LCD_WriteInteger(j);
 256:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <__data_end>
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 92 03 	call	0x724	; 0x724 <LCD_WriteInteger>
	Buzzer_OFF();
 264:	0e 94 99 02 	call	0x532	; 0x532 <Buzzer_OFF>
 268:	08 95       	ret

0000026a <Seconds_CountDown>:
}

void Seconds_CountDown (void)
{
	while(j!=0)
 26a:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__data_end>
 26e:	88 23       	and	r24, r24
 270:	c9 f1       	breq	.+114    	; 0x2e4 <Seconds_CountDown+0x7a>
	{
		LCD_Clear();
 272:	0e 94 3e 04 	call	0x87c	; 0x87c <LCD_Clear>
		j--;
 276:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__data_end>
 27a:	81 50       	subi	r24, 0x01	; 1
 27c:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__data_end>
		LCD_GoTo(0,0);
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
		LCD_WriteString("MIN : SEC");
 288:	88 ea       	ldi	r24, 0xA8	; 168
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 76 03 	call	0x6ec	; 0x6ec <LCD_WriteString>
		LCD_GoTo(1,0);
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
		LCD_WriteInteger(i);
 298:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <i>
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 92 03 	call	0x724	; 0x724 <LCD_WriteInteger>
		LCD_GoTo(1,4);
 2a6:	64 e0       	ldi	r22, 0x04	; 4
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
		LCD_WriteChar(':');
 2ae:	8a e3       	ldi	r24, 0x3A	; 58
 2b0:	0e 94 18 03 	call	0x630	; 0x630 <LCD_WriteChar>
		LCD_GoTo(1,6);
 2b4:	66 e0       	ldi	r22, 0x06	; 6
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
		LCD_WriteInteger(j);
 2bc:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <__data_end>
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 92 03 	call	0x724	; 0x724 <LCD_WriteInteger>
 2ca:	2f ef       	ldi	r18, 0xFF	; 255
 2cc:	83 ed       	ldi	r24, 0xD3	; 211
 2ce:	90 e3       	ldi	r25, 0x30	; 48
 2d0:	21 50       	subi	r18, 0x01	; 1
 2d2:	80 40       	sbci	r24, 0x00	; 0
 2d4:	90 40       	sbci	r25, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <Seconds_CountDown+0x66>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <Seconds_CountDown+0x70>
 2da:	00 00       	nop
	Buzzer_OFF();
}

void Seconds_CountDown (void)
{
	while(j!=0)
 2dc:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__data_end>
 2e0:	81 11       	cpse	r24, r1
 2e2:	c7 cf       	rjmp	.-114    	; 0x272 <Seconds_CountDown+0x8>
 2e4:	08 95       	ret

000002e6 <Time_Finished>:
	}
}

void Time_Finished (void)
{
	LCD_Clear();
 2e6:	0e 94 3e 04 	call	0x87c	; 0x87c <LCD_Clear>
	LCD_WriteString(Arr);
 2ea:	8c e7       	ldi	r24, 0x7C	; 124
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 76 03 	call	0x6ec	; 0x6ec <LCD_WriteString>
	Buzzer_ON();
 2f2:	0e 94 94 02 	call	0x528	; 0x528 <Buzzer_ON>
	LED_ON();
 2f6:	0e 94 48 04 	call	0x890	; 0x890 <LED_ON>
 2fa:	2f ef       	ldi	r18, 0xFF	; 255
 2fc:	87 ea       	ldi	r24, 0xA7	; 167
 2fe:	91 e6       	ldi	r25, 0x61	; 97
 300:	21 50       	subi	r18, 0x01	; 1
 302:	80 40       	sbci	r24, 0x00	; 0
 304:	90 40       	sbci	r25, 0x00	; 0
 306:	e1 f7       	brne	.-8      	; 0x300 <Time_Finished+0x1a>
 308:	00 c0       	rjmp	.+0      	; 0x30a <Time_Finished+0x24>
 30a:	00 00       	nop
	_delay_ms(2000);
	Buzzer_OFF();
 30c:	0e 94 99 02 	call	0x532	; 0x532 <Buzzer_OFF>
	LED_OFF();
 310:	0e 94 4d 04 	call	0x89a	; 0x89a <LED_OFF>
 314:	2f ef       	ldi	r18, 0xFF	; 255
 316:	83 ed       	ldi	r24, 0xD3	; 211
 318:	90 e3       	ldi	r25, 0x30	; 48
 31a:	21 50       	subi	r18, 0x01	; 1
 31c:	80 40       	sbci	r24, 0x00	; 0
 31e:	90 40       	sbci	r25, 0x00	; 0
 320:	e1 f7       	brne	.-8      	; 0x31a <Time_Finished+0x34>
 322:	00 c0       	rjmp	.+0      	; 0x324 <Time_Finished+0x3e>
 324:	00 00       	nop
	_delay_ms(1000);
	Buzzer_ON();
 326:	0e 94 94 02 	call	0x528	; 0x528 <Buzzer_ON>
	LED_ON();
 32a:	0e 94 48 04 	call	0x890	; 0x890 <LED_ON>
 32e:	2f ef       	ldi	r18, 0xFF	; 255
 330:	87 ea       	ldi	r24, 0xA7	; 167
 332:	91 e6       	ldi	r25, 0x61	; 97
 334:	21 50       	subi	r18, 0x01	; 1
 336:	80 40       	sbci	r24, 0x00	; 0
 338:	90 40       	sbci	r25, 0x00	; 0
 33a:	e1 f7       	brne	.-8      	; 0x334 <Time_Finished+0x4e>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <Time_Finished+0x58>
 33e:	00 00       	nop
	_delay_ms(2000);
	Buzzer_OFF();
 340:	0e 94 99 02 	call	0x532	; 0x532 <Buzzer_OFF>
	LED_OFF();
 344:	0e 94 4d 04 	call	0x89a	; 0x89a <LED_OFF>
 348:	08 95       	ret

0000034a <Button3_Functionality>:
		LCD_WriteInteger(j);
	}
}

void Button3_Functionality (void)
{
 34a:	cf 93       	push	r28
 34c:	2f ef       	ldi	r18, 0xFF	; 255
 34e:	83 ed       	ldi	r24, 0xD3	; 211
 350:	90 e3       	ldi	r25, 0x30	; 48
 352:	21 50       	subi	r18, 0x01	; 1
 354:	80 40       	sbci	r24, 0x00	; 0
 356:	90 40       	sbci	r25, 0x00	; 0
 358:	e1 f7       	brne	.-8      	; 0x352 <Button3_Functionality+0x8>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <Button3_Functionality+0x12>
 35c:	00 00       	nop
	_delay_ms(1000);
	Seconds_CountDown();
 35e:	0e 94 35 01 	call	0x26a	; 0x26a <Seconds_CountDown>
	{
		if(j==0)
		{
			LCD_Clear();
			i--;
			j=59;
 362:	cb e3       	ldi	r28, 0x3B	; 59

void Button3_Functionality (void)
{
	_delay_ms(1000);
	Seconds_CountDown();
	while(i!=0)
 364:	3b c0       	rjmp	.+118    	; 0x3dc <Button3_Functionality+0x92>
	{
		if(j==0)
 366:	91 11       	cpse	r25, r1
 368:	3d c0       	rjmp	.+122    	; 0x3e4 <Button3_Functionality+0x9a>
		{
			LCD_Clear();
 36a:	0e 94 3e 04 	call	0x87c	; 0x87c <LCD_Clear>
			i--;
 36e:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <i>
 372:	81 50       	subi	r24, 0x01	; 1
 374:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <i>
			j=59;
 378:	c0 93 b2 00 	sts	0x00B2, r28	; 0x8000b2 <__data_end>
			LCD_GoTo(0,0);
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
			LCD_WriteString("MIN : SEC");
 384:	88 ea       	ldi	r24, 0xA8	; 168
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 76 03 	call	0x6ec	; 0x6ec <LCD_WriteString>
			LCD_GoTo(1,0);
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
			LCD_WriteInteger(i);
 394:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <i>
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 92 03 	call	0x724	; 0x724 <LCD_WriteInteger>
			LCD_GoTo(1,4);
 3a2:	64 e0       	ldi	r22, 0x04	; 4
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
			LCD_WriteChar(':');
 3aa:	8a e3       	ldi	r24, 0x3A	; 58
 3ac:	0e 94 18 03 	call	0x630	; 0x630 <LCD_WriteChar>
			LCD_GoTo(1,6);
 3b0:	66 e0       	ldi	r22, 0x06	; 6
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
			LCD_WriteInteger(j);
 3b8:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <__data_end>
 3bc:	70 e0       	ldi	r23, 0x00	; 0
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 92 03 	call	0x724	; 0x724 <LCD_WriteInteger>
 3c6:	2f ef       	ldi	r18, 0xFF	; 255
 3c8:	83 ed       	ldi	r24, 0xD3	; 211
 3ca:	90 e3       	ldi	r25, 0x30	; 48
 3cc:	21 50       	subi	r18, 0x01	; 1
 3ce:	80 40       	sbci	r24, 0x00	; 0
 3d0:	90 40       	sbci	r25, 0x00	; 0
 3d2:	e1 f7       	brne	.-8      	; 0x3cc <Button3_Functionality+0x82>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <Button3_Functionality+0x8c>
 3d6:	00 00       	nop
			_delay_ms(1000);
			Seconds_CountDown();
 3d8:	0e 94 35 01 	call	0x26a	; 0x26a <Seconds_CountDown>

void Button3_Functionality (void)
{
	_delay_ms(1000);
	Seconds_CountDown();
	while(i!=0)
 3dc:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <i>
	{
		if(j==0)
 3e0:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <__data_end>

void Button3_Functionality (void)
{
	_delay_ms(1000);
	Seconds_CountDown();
	while(i!=0)
 3e4:	81 11       	cpse	r24, r1
 3e6:	bf cf       	rjmp	.-130    	; 0x366 <Button3_Functionality+0x1c>
			LCD_WriteInteger(j);
			_delay_ms(1000);
			Seconds_CountDown();
		}
	}
	if (i==0 && j==0) //When Time is 0:0 Turn On Buzzer
 3e8:	91 11       	cpse	r25, r1
 3ea:	2d c0       	rjmp	.+90     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
	{
		
		Time_Finished();
 3ec:	0e 94 73 01 	call	0x2e6	; 0x2e6 <Time_Finished>
		LCD_Clear();
 3f0:	0e 94 3e 04 	call	0x87c	; 0x87c <LCD_Clear>
		i=0;
 3f4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <i>
		j=0;
 3f8:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__data_end>
		LCD_GoTo(0,0);
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
		LCD_WriteString("MIN : SEC");
 404:	88 ea       	ldi	r24, 0xA8	; 168
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 76 03 	call	0x6ec	; 0x6ec <LCD_WriteString>
		LCD_GoTo(1,0);
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
		LCD_WriteInteger(i);
 414:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <i>
 418:	70 e0       	ldi	r23, 0x00	; 0
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 92 03 	call	0x724	; 0x724 <LCD_WriteInteger>
		LCD_GoTo(1,4);
 422:	64 e0       	ldi	r22, 0x04	; 4
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
		LCD_WriteChar(':');
 42a:	8a e3       	ldi	r24, 0x3A	; 58
 42c:	0e 94 18 03 	call	0x630	; 0x630 <LCD_WriteChar>
		LCD_GoTo(1,6);
 430:	66 e0       	ldi	r22, 0x06	; 6
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	0e 94 23 04 	call	0x846	; 0x846 <LCD_GoTo>
		LCD_WriteInteger(j);
 438:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <__data_end>
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	0e 94 92 03 	call	0x724	; 0x724 <LCD_WriteInteger>
	}
}
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <App>:
uint8 Arr[String_Size]="Time's Up";


void App (void)
{
	 Button1_Val=Button_GetValue(Button_1);
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Button_GetValue>
 450:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <Button1_Val>
	 Button2_Val=Button_GetValue(Button_2);
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Button_GetValue>
 45a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <Button2_Val>
	 Button3_Val=Button_GetValue(Button_3);
 45e:	82 e0       	ldi	r24, 0x02	; 2
 460:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Button_GetValue>
 464:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <Button3_Val>
	 Button4_Val=Button_GetValue(Button_4);
 468:	83 e0       	ldi	r24, 0x03	; 3
 46a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Button_GetValue>
 46e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <Button4_Val>
	 
	 if (Button1_Val==0) //Increase Minutes Button
 472:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <Button1_Val>
 476:	91 11       	cpse	r25, r1
 478:	03 c0       	rjmp	.+6      	; 0x480 <App+0x36>
	 {
		 Button1_Functionality();
 47a:	0e 94 a9 00 	call	0x152	; 0x152 <Button1_Functionality>
 47e:	08 95       	ret
	 }
	 else if (Button2_Val==0) //Increase Seconds Button
 480:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <Button2_Val>
 484:	91 11       	cpse	r25, r1
 486:	03 c0       	rjmp	.+6      	; 0x48e <App+0x44>
	 {
		 Button2_Functionality();
 488:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Button2_Functionality>
 48c:	08 95       	ret
	 }
	 else if (Button3_Val==0) //Timer ON Button
 48e:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <Button3_Val>
 492:	91 11       	cpse	r25, r1
 494:	03 c0       	rjmp	.+6      	; 0x49c <App+0x52>
	 {
		 Button3_Functionality();
 496:	0e 94 a5 01 	call	0x34a	; 0x34a <Button3_Functionality>
 49a:	08 95       	ret
	 }
	 else if(Button4_Val==0)  //Reset Button
 49c:	81 11       	cpse	r24, r1
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <App+0x5a>
	 {
		 Button4_Functionality();
 4a0:	0e 94 07 01 	call	0x20e	; 0x20e <Button4_Functionality>
 4a4:	08 95       	ret

000004a6 <Button_GetValue>:
}
uint8 Button_GetValue(uint8 Button)
{
	//uint8 Temp=0;
	uint8 Button_Val=1;
	switch (Button)
 4a6:	81 30       	cpi	r24, 0x01	; 1
 4a8:	a1 f0       	breq	.+40     	; 0x4d2 <Button_GetValue+0x2c>
 4aa:	28 f0       	brcs	.+10     	; 0x4b6 <Button_GetValue+0x10>
 4ac:	82 30       	cpi	r24, 0x02	; 2
 4ae:	f9 f0       	breq	.+62     	; 0x4ee <Button_GetValue+0x48>
 4b0:	83 30       	cpi	r24, 0x03	; 3
 4b2:	51 f1       	breq	.+84     	; 0x508 <Button_GetValue+0x62>
 4b4:	37 c0       	rjmp	.+110    	; 0x524 <Button_GetValue+0x7e>
	{
		case Button_1:
		Button_Val=GET_BIT(PIND,2);
 4b6:	80 b3       	in	r24, 0x10	; 16
 4b8:	82 fb       	bst	r24, 2
 4ba:	88 27       	eor	r24, r24
 4bc:	80 f9       	bld	r24, 0
 4be:	2f ef       	ldi	r18, 0xFF	; 255
 4c0:	36 e7       	ldi	r19, 0x76	; 118
 4c2:	91 e0       	ldi	r25, 0x01	; 1
 4c4:	21 50       	subi	r18, 0x01	; 1
 4c6:	30 40       	sbci	r19, 0x00	; 0
 4c8:	90 40       	sbci	r25, 0x00	; 0
 4ca:	e1 f7       	brne	.-8      	; 0x4c4 <Button_GetValue+0x1e>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <Button_GetValue+0x28>
 4ce:	00 00       	nop
 4d0:	08 95       	ret
	    }*/
	     _delay_ms(30);
		 break;
		 
		 case Button_2:
		 Button_Val=GET_BIT(PIND,3);
 4d2:	80 b3       	in	r24, 0x10	; 16
 4d4:	83 fb       	bst	r24, 3
 4d6:	88 27       	eor	r24, r24
 4d8:	80 f9       	bld	r24, 0
 4da:	2f ef       	ldi	r18, 0xFF	; 255
 4dc:	36 e7       	ldi	r19, 0x76	; 118
 4de:	91 e0       	ldi	r25, 0x01	; 1
 4e0:	21 50       	subi	r18, 0x01	; 1
 4e2:	30 40       	sbci	r19, 0x00	; 0
 4e4:	90 40       	sbci	r25, 0x00	; 0
 4e6:	e1 f7       	brne	.-8      	; 0x4e0 <Button_GetValue+0x3a>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <Button_GetValue+0x44>
 4ea:	00 00       	nop
 4ec:	08 95       	ret
	    }*/
		 _delay_ms(30);
		 break;
		 
		 case Button_3:
		 Button_Val=GET_BIT(PIND,4);
 4ee:	80 b3       	in	r24, 0x10	; 16
 4f0:	82 95       	swap	r24
 4f2:	81 70       	andi	r24, 0x01	; 1
 4f4:	2f ef       	ldi	r18, 0xFF	; 255
 4f6:	36 e7       	ldi	r19, 0x76	; 118
 4f8:	91 e0       	ldi	r25, 0x01	; 1
 4fa:	21 50       	subi	r18, 0x01	; 1
 4fc:	30 40       	sbci	r19, 0x00	; 0
 4fe:	90 40       	sbci	r25, 0x00	; 0
 500:	e1 f7       	brne	.-8      	; 0x4fa <Button_GetValue+0x54>
 502:	00 c0       	rjmp	.+0      	; 0x504 <Button_GetValue+0x5e>
 504:	00 00       	nop
 506:	08 95       	ret
	    }*/
		 _delay_ms(30);
		 break;
		 
		 case Button_4:
		 Button_Val=GET_BIT(PIND,5);
 508:	80 b3       	in	r24, 0x10	; 16
 50a:	85 fb       	bst	r24, 5
 50c:	88 27       	eor	r24, r24
 50e:	80 f9       	bld	r24, 0
 510:	2f ef       	ldi	r18, 0xFF	; 255
 512:	36 e7       	ldi	r19, 0x76	; 118
 514:	91 e0       	ldi	r25, 0x01	; 1
 516:	21 50       	subi	r18, 0x01	; 1
 518:	30 40       	sbci	r19, 0x00	; 0
 51a:	90 40       	sbci	r25, 0x00	; 0
 51c:	e1 f7       	brne	.-8      	; 0x516 <Button_GetValue+0x70>
 51e:	00 c0       	rjmp	.+0      	; 0x520 <Button_GetValue+0x7a>
 520:	00 00       	nop
 522:	08 95       	ret
	CLR_BIT(DDRD,5); //Input
}
uint8 Button_GetValue(uint8 Button)
{
	//uint8 Temp=0;
	uint8 Button_Val=1;
 524:	81 e0       	ldi	r24, 0x01	; 1
		 default:
		 break;
	}
	
	return Button_Val;
 526:	08 95       	ret

00000528 <Buzzer_ON>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void Buzzer_ON (void)
{
	DIO_WriteChannel(PORTC_PIN5 , PIN_HIGH);
 528:	61 e0       	ldi	r22, 0x01	; 1
 52a:	85 e1       	ldi	r24, 0x15	; 21
 52c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
 530:	08 95       	ret

00000532 <Buzzer_OFF>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void Buzzer_OFF (void)
{
	DIO_WriteChannel(PORTC_PIN5 , PIN_LOW);
 532:	60 e0       	ldi	r22, 0x00	; 0
 534:	85 e1       	ldi	r24, 0x15	; 21
 536:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
 53a:	08 95       	ret

0000053c <LCD_WriteCommand>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_WriteCommand(uint8 cmd)
{
 53c:	cf 93       	push	r28
 53e:	c8 2f       	mov	r28, r24
	DIO_WriteChannel(LCD_RS_PIN , PIN_LOW);
 540:	60 e0       	ldi	r22, 0x00	; 0
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_E_PIN , PIN_LOW);
 548:	60 e0       	ldi	r22, 0x00	; 0
 54a:	82 e0       	ldi	r24, 0x02	; 2
 54c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_D4_PIN , GET_BIT(cmd , 4));
 550:	c4 fb       	bst	r28, 4
 552:	66 27       	eor	r22, r22
 554:	60 f9       	bld	r22, 0
 556:	83 e0       	ldi	r24, 0x03	; 3
 558:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D5_PIN , GET_BIT(cmd , 5));
 55c:	c5 fb       	bst	r28, 5
 55e:	66 27       	eor	r22, r22
 560:	60 f9       	bld	r22, 0
 562:	84 e0       	ldi	r24, 0x04	; 4
 564:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D6_PIN , GET_BIT(cmd , 6));
 568:	c6 fb       	bst	r28, 6
 56a:	66 27       	eor	r22, r22
 56c:	60 f9       	bld	r22, 0
 56e:	85 e0       	ldi	r24, 0x05	; 5
 570:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D7_PIN , GET_BIT(cmd , 7));
 574:	6c 2f       	mov	r22, r28
 576:	66 1f       	adc	r22, r22
 578:	66 27       	eor	r22, r22
 57a:	66 1f       	adc	r22, r22
 57c:	86 e0       	ldi	r24, 0x06	; 6
 57e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_E_PIN , PIN_HIGH);
 582:	61 e0       	ldi	r22, 0x01	; 1
 584:	82 e0       	ldi	r24, 0x02	; 2
 586:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
 58a:	8f e9       	ldi	r24, 0x9F	; 159
 58c:	9f e0       	ldi	r25, 0x0F	; 15
 58e:	01 97       	sbiw	r24, 0x01	; 1
 590:	f1 f7       	brne	.-4      	; 0x58e <LCD_WriteCommand+0x52>
 592:	00 c0       	rjmp	.+0      	; 0x594 <LCD_WriteCommand+0x58>
 594:	00 00       	nop
	_delay_ms(1);
	DIO_WriteChannel(LCD_E_PIN , PIN_LOW);
 596:	60 e0       	ldi	r22, 0x00	; 0
 598:	82 e0       	ldi	r24, 0x02	; 2
 59a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_D4_PIN , GET_BIT(cmd , 0));
 59e:	6c 2f       	mov	r22, r28
 5a0:	61 70       	andi	r22, 0x01	; 1
 5a2:	83 e0       	ldi	r24, 0x03	; 3
 5a4:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D5_PIN , GET_BIT(cmd , 1));
 5a8:	c1 fb       	bst	r28, 1
 5aa:	66 27       	eor	r22, r22
 5ac:	60 f9       	bld	r22, 0
 5ae:	84 e0       	ldi	r24, 0x04	; 4
 5b0:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D6_PIN , GET_BIT(cmd , 2));
 5b4:	c2 fb       	bst	r28, 2
 5b6:	66 27       	eor	r22, r22
 5b8:	60 f9       	bld	r22, 0
 5ba:	85 e0       	ldi	r24, 0x05	; 5
 5bc:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D7_PIN , GET_BIT(cmd , 3));
 5c0:	c3 fb       	bst	r28, 3
 5c2:	66 27       	eor	r22, r22
 5c4:	60 f9       	bld	r22, 0
 5c6:	86 e0       	ldi	r24, 0x06	; 6
 5c8:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_E_PIN , PIN_HIGH);
 5cc:	61 e0       	ldi	r22, 0x01	; 1
 5ce:	82 e0       	ldi	r24, 0x02	; 2
 5d0:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
 5d4:	8f e9       	ldi	r24, 0x9F	; 159
 5d6:	9f e0       	ldi	r25, 0x0F	; 15
 5d8:	01 97       	sbiw	r24, 0x01	; 1
 5da:	f1 f7       	brne	.-4      	; 0x5d8 <LCD_WriteCommand+0x9c>
 5dc:	00 c0       	rjmp	.+0      	; 0x5de <LCD_WriteCommand+0xa2>
 5de:	00 00       	nop
	_delay_ms(1);
	DIO_WriteChannel(LCD_E_PIN , PIN_LOW);
 5e0:	60 e0       	ldi	r22, 0x00	; 0
 5e2:	82 e0       	ldi	r24, 0x02	; 2
 5e4:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
 5e8:	8f e1       	ldi	r24, 0x1F	; 31
 5ea:	9e e4       	ldi	r25, 0x4E	; 78
 5ec:	01 97       	sbiw	r24, 0x01	; 1
 5ee:	f1 f7       	brne	.-4      	; 0x5ec <LCD_WriteCommand+0xb0>
 5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <LCD_WriteCommand+0xb6>
 5f2:	00 00       	nop
	
	_delay_ms(5);
}
 5f4:	cf 91       	pop	r28
 5f6:	08 95       	ret

000005f8 <LCD_Init>:
*******************************************************************************/
void LCD_Init(void)
{
	#if (LCD_OPERATION_MODE == 4)
	/*LCD 4 BIT MODE COMMANDS*/
	LCD_WriteCommand(0X33);
 5f8:	83 e3       	ldi	r24, 0x33	; 51
 5fa:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_WriteCommand>
	LCD_WriteCommand(0X32);
 5fe:	82 e3       	ldi	r24, 0x32	; 50
 600:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_WriteCommand>
	LCD_WriteCommand(0X28);
 604:	88 e2       	ldi	r24, 0x28	; 40
 606:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_WriteCommand>
	/************************/
	/*COMMANDS FOR LCD*/
	LCD_WriteCommand(0x0C);
 60a:	8c e0       	ldi	r24, 0x0C	; 12
 60c:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_WriteCommand>
	LCD_WriteCommand(0X01);
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_WriteCommand>
	LCD_WriteCommand(0X06);
 616:	86 e0       	ldi	r24, 0x06	; 6
 618:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_WriteCommand>
	LCD_WriteCommand(0X02);
 61c:	82 e0       	ldi	r24, 0x02	; 2
 61e:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_WriteCommand>
 622:	8f e1       	ldi	r24, 0x1F	; 31
 624:	9e e4       	ldi	r25, 0x4E	; 78
 626:	01 97       	sbiw	r24, 0x01	; 1
 628:	f1 f7       	brne	.-4      	; 0x626 <LCD_Init+0x2e>
 62a:	00 c0       	rjmp	.+0      	; 0x62c <LCD_Init+0x34>
 62c:	00 00       	nop
 62e:	08 95       	ret

00000630 <LCD_WriteChar>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_WriteChar(uint8 Data)
{
 630:	cf 93       	push	r28
 632:	c8 2f       	mov	r28, r24
	DIO_WriteChannel(LCD_RS_PIN , PIN_HIGH);
 634:	61 e0       	ldi	r22, 0x01	; 1
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_E_PIN , PIN_LOW);
 63c:	60 e0       	ldi	r22, 0x00	; 0
 63e:	82 e0       	ldi	r24, 0x02	; 2
 640:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_D4_PIN , GET_BIT(Data , 4));
 644:	c4 fb       	bst	r28, 4
 646:	66 27       	eor	r22, r22
 648:	60 f9       	bld	r22, 0
 64a:	83 e0       	ldi	r24, 0x03	; 3
 64c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D5_PIN , GET_BIT(Data , 5));
 650:	c5 fb       	bst	r28, 5
 652:	66 27       	eor	r22, r22
 654:	60 f9       	bld	r22, 0
 656:	84 e0       	ldi	r24, 0x04	; 4
 658:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D6_PIN , GET_BIT(Data , 6));
 65c:	c6 fb       	bst	r28, 6
 65e:	66 27       	eor	r22, r22
 660:	60 f9       	bld	r22, 0
 662:	85 e0       	ldi	r24, 0x05	; 5
 664:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D7_PIN , GET_BIT(Data , 7));
 668:	6c 2f       	mov	r22, r28
 66a:	66 1f       	adc	r22, r22
 66c:	66 27       	eor	r22, r22
 66e:	66 1f       	adc	r22, r22
 670:	86 e0       	ldi	r24, 0x06	; 6
 672:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_E_PIN , PIN_HIGH);
 676:	61 e0       	ldi	r22, 0x01	; 1
 678:	82 e0       	ldi	r24, 0x02	; 2
 67a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
 67e:	8f e9       	ldi	r24, 0x9F	; 159
 680:	9f e0       	ldi	r25, 0x0F	; 15
 682:	01 97       	sbiw	r24, 0x01	; 1
 684:	f1 f7       	brne	.-4      	; 0x682 <LCD_WriteChar+0x52>
 686:	00 c0       	rjmp	.+0      	; 0x688 <LCD_WriteChar+0x58>
 688:	00 00       	nop
	_delay_ms(1);
	DIO_WriteChannel(LCD_E_PIN , PIN_LOW);
 68a:	60 e0       	ldi	r22, 0x00	; 0
 68c:	82 e0       	ldi	r24, 0x02	; 2
 68e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_D4_PIN , GET_BIT(Data , 0));
 692:	6c 2f       	mov	r22, r28
 694:	61 70       	andi	r22, 0x01	; 1
 696:	83 e0       	ldi	r24, 0x03	; 3
 698:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D5_PIN , GET_BIT(Data , 1));
 69c:	c1 fb       	bst	r28, 1
 69e:	66 27       	eor	r22, r22
 6a0:	60 f9       	bld	r22, 0
 6a2:	84 e0       	ldi	r24, 0x04	; 4
 6a4:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D6_PIN , GET_BIT(Data , 2));
 6a8:	c2 fb       	bst	r28, 2
 6aa:	66 27       	eor	r22, r22
 6ac:	60 f9       	bld	r22, 0
 6ae:	85 e0       	ldi	r24, 0x05	; 5
 6b0:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D7_PIN , GET_BIT(Data , 3));
 6b4:	c3 fb       	bst	r28, 3
 6b6:	66 27       	eor	r22, r22
 6b8:	60 f9       	bld	r22, 0
 6ba:	86 e0       	ldi	r24, 0x06	; 6
 6bc:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_E_PIN , PIN_HIGH);
 6c0:	61 e0       	ldi	r22, 0x01	; 1
 6c2:	82 e0       	ldi	r24, 0x02	; 2
 6c4:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
 6c8:	8f e9       	ldi	r24, 0x9F	; 159
 6ca:	9f e0       	ldi	r25, 0x0F	; 15
 6cc:	01 97       	sbiw	r24, 0x01	; 1
 6ce:	f1 f7       	brne	.-4      	; 0x6cc <LCD_WriteChar+0x9c>
 6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <LCD_WriteChar+0xa2>
 6d2:	00 00       	nop
	_delay_ms(1);
	DIO_WriteChannel(LCD_E_PIN , PIN_LOW);
 6d4:	60 e0       	ldi	r22, 0x00	; 0
 6d6:	82 e0       	ldi	r24, 0x02	; 2
 6d8:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
 6dc:	8f e1       	ldi	r24, 0x1F	; 31
 6de:	9e e4       	ldi	r25, 0x4E	; 78
 6e0:	01 97       	sbiw	r24, 0x01	; 1
 6e2:	f1 f7       	brne	.-4      	; 0x6e0 <LCD_WriteChar+0xb0>
 6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <LCD_WriteChar+0xb6>
 6e6:	00 00       	nop
	
	_delay_ms(5);
}
 6e8:	cf 91       	pop	r28
 6ea:	08 95       	ret

000006ec <LCD_WriteString>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_WriteString(uint8* str)
{
 6ec:	0f 93       	push	r16
 6ee:	1f 93       	push	r17
 6f0:	cf 93       	push	r28
 6f2:	fc 01       	movw	r30, r24
	uint8 i=0;
	while(str[i]!='\0')
 6f4:	80 81       	ld	r24, Z
 6f6:	88 23       	and	r24, r24
 6f8:	59 f0       	breq	.+22     	; 0x710 <LCD_WriteString+0x24>
 6fa:	8f 01       	movw	r16, r30
 6fc:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_WriteChar(str[i]);
 6fe:	0e 94 18 03 	call	0x630	; 0x630 <LCD_WriteChar>
		i++;
 702:	cf 5f       	subi	r28, 0xFF	; 255
*                                    E_NOT_OK
*******************************************************************************/
void LCD_WriteString(uint8* str)
{
	uint8 i=0;
	while(str[i]!='\0')
 704:	f8 01       	movw	r30, r16
 706:	ec 0f       	add	r30, r28
 708:	f1 1d       	adc	r31, r1
 70a:	80 81       	ld	r24, Z
 70c:	81 11       	cpse	r24, r1
 70e:	f7 cf       	rjmp	.-18     	; 0x6fe <LCD_WriteString+0x12>
 710:	8f e1       	ldi	r24, 0x1F	; 31
 712:	9e e4       	ldi	r25, 0x4E	; 78
 714:	01 97       	sbiw	r24, 0x01	; 1
 716:	f1 f7       	brne	.-4      	; 0x714 <LCD_WriteString+0x28>
 718:	00 c0       	rjmp	.+0      	; 0x71a <LCD_WriteString+0x2e>
 71a:	00 00       	nop
	{
		LCD_WriteChar(str[i]);
		i++;
	}
	_delay_ms(5);
}
 71c:	cf 91       	pop	r28
 71e:	1f 91       	pop	r17
 720:	0f 91       	pop	r16
 722:	08 95       	ret

00000724 <LCD_WriteInteger>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_WriteInteger(sint32 num)
{
 724:	4f 92       	push	r4
 726:	5f 92       	push	r5
 728:	6f 92       	push	r6
 72a:	7f 92       	push	r7
 72c:	8f 92       	push	r8
 72e:	9f 92       	push	r9
 730:	af 92       	push	r10
 732:	bf 92       	push	r11
 734:	cf 92       	push	r12
 736:	df 92       	push	r13
 738:	ef 92       	push	r14
 73a:	ff 92       	push	r15
 73c:	6b 01       	movw	r12, r22
 73e:	7c 01       	movw	r14, r24
	 sint32 temp = 1;
	 if(num == 0)
 740:	61 15       	cp	r22, r1
 742:	71 05       	cpc	r23, r1
 744:	81 05       	cpc	r24, r1
 746:	91 05       	cpc	r25, r1
 748:	51 f4       	brne	.+20     	; 0x75e <LCD_WriteInteger+0x3a>
	 {
		 LCD_WriteChar('0');
 74a:	80 e3       	ldi	r24, 0x30	; 48
 74c:	0e 94 18 03 	call	0x630	; 0x630 <LCD_WriteChar>
 750:	67 c0       	rjmp	.+206    	; 0x820 <LCD_WriteInteger+0xfc>
	 {
		 LCD_WriteChar('-');
		 num *= -1;
	 }
 	
	 while(num > 0)
 752:	1c 14       	cp	r1, r12
 754:	1d 04       	cpc	r1, r13
 756:	1e 04       	cpc	r1, r14
 758:	1f 04       	cpc	r1, r15
 75a:	7c f0       	brlt	.+30     	; 0x77a <LCD_WriteInteger+0x56>
 75c:	61 c0       	rjmp	.+194    	; 0x820 <LCD_WriteInteger+0xfc>
	 if(num == 0)
	 {
		 LCD_WriteChar('0');
	 }

	 else if(num < 0)
 75e:	99 23       	and	r25, r25
 760:	c4 f7       	brge	.-16     	; 0x752 <LCD_WriteInteger+0x2e>
	 {
		 LCD_WriteChar('-');
 762:	8d e2       	ldi	r24, 0x2D	; 45
 764:	0e 94 18 03 	call	0x630	; 0x630 <LCD_WriteChar>
		 num *= -1;
 768:	f0 94       	com	r15
 76a:	e0 94       	com	r14
 76c:	d0 94       	com	r13
 76e:	c0 94       	com	r12
 770:	c1 1c       	adc	r12, r1
 772:	d1 1c       	adc	r13, r1
 774:	e1 1c       	adc	r14, r1
 776:	f1 1c       	adc	r15, r1
 778:	ec cf       	rjmp	.-40     	; 0x752 <LCD_WriteInteger+0x2e>
	 }
 	
	 while(num > 0)
 77a:	61 e0       	ldi	r22, 0x01	; 1
 77c:	70 e0       	ldi	r23, 0x00	; 0
 77e:	80 e0       	ldi	r24, 0x00	; 0
 780:	90 e0       	ldi	r25, 0x00	; 0
	 {
	 	 temp = ((temp*10) + (num%10));
 782:	0f 2e       	mov	r0, r31
 784:	fa e0       	ldi	r31, 0x0A	; 10
 786:	8f 2e       	mov	r8, r31
 788:	91 2c       	mov	r9, r1
 78a:	a1 2c       	mov	r10, r1
 78c:	b1 2c       	mov	r11, r1
 78e:	f0 2d       	mov	r31, r0
 790:	dc 01       	movw	r26, r24
 792:	cb 01       	movw	r24, r22
 794:	88 0f       	add	r24, r24
 796:	99 1f       	adc	r25, r25
 798:	aa 1f       	adc	r26, r26
 79a:	bb 1f       	adc	r27, r27
 79c:	2c 01       	movw	r4, r24
 79e:	3d 01       	movw	r6, r26
 7a0:	44 0c       	add	r4, r4
 7a2:	55 1c       	adc	r5, r5
 7a4:	66 1c       	adc	r6, r6
 7a6:	77 1c       	adc	r7, r7
 7a8:	44 0c       	add	r4, r4
 7aa:	55 1c       	adc	r5, r5
 7ac:	66 1c       	adc	r6, r6
 7ae:	77 1c       	adc	r7, r7
 7b0:	48 0e       	add	r4, r24
 7b2:	59 1e       	adc	r5, r25
 7b4:	6a 1e       	adc	r6, r26
 7b6:	7b 1e       	adc	r7, r27
 7b8:	c7 01       	movw	r24, r14
 7ba:	b6 01       	movw	r22, r12
 7bc:	a5 01       	movw	r20, r10
 7be:	94 01       	movw	r18, r8
 7c0:	0e 94 5c 05 	call	0xab8	; 0xab8 <__divmodsi4>
 7c4:	64 0d       	add	r22, r4
 7c6:	75 1d       	adc	r23, r5
 7c8:	86 1d       	adc	r24, r6
 7ca:	97 1d       	adc	r25, r7
	 	 num /= 10;
 7cc:	c2 2e       	mov	r12, r18
 7ce:	d3 2e       	mov	r13, r19
 7d0:	e4 2e       	mov	r14, r20
 7d2:	f5 2e       	mov	r15, r21
	 {
		 LCD_WriteChar('-');
		 num *= -1;
	 }
 	
	 while(num > 0)
 7d4:	1c 14       	cp	r1, r12
 7d6:	1d 04       	cpc	r1, r13
 7d8:	1e 04       	cpc	r1, r14
 7da:	1f 04       	cpc	r1, r15
 7dc:	cc f2       	brlt	.-78     	; 0x790 <LCD_WriteInteger+0x6c>
	 {
	 	 temp = ((temp*10) + (num%10));
	 	 num /= 10;
	 }
	 
	 while(temp > 1 )
 7de:	62 30       	cpi	r22, 0x02	; 2
 7e0:	71 05       	cpc	r23, r1
 7e2:	81 05       	cpc	r24, r1
 7e4:	91 05       	cpc	r25, r1
 7e6:	e4 f0       	brlt	.+56     	; 0x820 <LCD_WriteInteger+0xfc>
	 {
	 	 LCD_WriteChar(((temp%10)+48));
 7e8:	0f 2e       	mov	r0, r31
 7ea:	fa e0       	ldi	r31, 0x0A	; 10
 7ec:	8f 2e       	mov	r8, r31
 7ee:	91 2c       	mov	r9, r1
 7f0:	a1 2c       	mov	r10, r1
 7f2:	b1 2c       	mov	r11, r1
 7f4:	f0 2d       	mov	r31, r0
 7f6:	a5 01       	movw	r20, r10
 7f8:	94 01       	movw	r18, r8
 7fa:	0e 94 5c 05 	call	0xab8	; 0xab8 <__divmodsi4>
 7fe:	c2 2e       	mov	r12, r18
 800:	d3 2e       	mov	r13, r19
 802:	e4 2e       	mov	r14, r20
 804:	f5 2e       	mov	r15, r21
 806:	80 e3       	ldi	r24, 0x30	; 48
 808:	86 0f       	add	r24, r22
 80a:	0e 94 18 03 	call	0x630	; 0x630 <LCD_WriteChar>
	 	 temp /= 10;
 80e:	6c 2d       	mov	r22, r12
 810:	7d 2d       	mov	r23, r13
 812:	8e 2d       	mov	r24, r14
 814:	9f 2d       	mov	r25, r15
	 {
	 	 temp = ((temp*10) + (num%10));
	 	 num /= 10;
	 }
	 
	 while(temp > 1 )
 816:	62 30       	cpi	r22, 0x02	; 2
 818:	71 05       	cpc	r23, r1
 81a:	81 05       	cpc	r24, r1
 81c:	91 05       	cpc	r25, r1
 81e:	5c f7       	brge	.-42     	; 0x7f6 <LCD_WriteInteger+0xd2>
 820:	8f e1       	ldi	r24, 0x1F	; 31
 822:	9e e4       	ldi	r25, 0x4E	; 78
 824:	01 97       	sbiw	r24, 0x01	; 1
 826:	f1 f7       	brne	.-4      	; 0x824 <LCD_WriteInteger+0x100>
 828:	00 c0       	rjmp	.+0      	; 0x82a <LCD_WriteInteger+0x106>
 82a:	00 00       	nop
	 	 LCD_WriteChar(((temp%10)+48));
	 	 temp /= 10;
	 }
	
	 _delay_ms(5);
}
 82c:	ff 90       	pop	r15
 82e:	ef 90       	pop	r14
 830:	df 90       	pop	r13
 832:	cf 90       	pop	r12
 834:	bf 90       	pop	r11
 836:	af 90       	pop	r10
 838:	9f 90       	pop	r9
 83a:	8f 90       	pop	r8
 83c:	7f 90       	pop	r7
 83e:	6f 90       	pop	r6
 840:	5f 90       	pop	r5
 842:	4f 90       	pop	r4
 844:	08 95       	ret

00000846 <LCD_GoTo>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_GoTo(uint8 Row, uint8 Column)
{
 846:	cf 93       	push	r28
 848:	df 93       	push	r29
 84a:	00 d0       	rcall	.+0      	; 0x84c <LCD_GoTo+0x6>
 84c:	cd b7       	in	r28, 0x3d	; 61
 84e:	de b7       	in	r29, 0x3e	; 62
	uint8 LCD_Loc[2]={0X80 , 0XC0};
 850:	90 e8       	ldi	r25, 0x80	; 128
 852:	99 83       	std	Y+1, r25	; 0x01
 854:	90 ec       	ldi	r25, 0xC0	; 192
 856:	9a 83       	std	Y+2, r25	; 0x02
	LCD_WriteCommand(LCD_Loc[Row] + Column);
 858:	fe 01       	movw	r30, r28
 85a:	e8 0f       	add	r30, r24
 85c:	f1 1d       	adc	r31, r1
 85e:	81 81       	ldd	r24, Z+1	; 0x01
 860:	86 0f       	add	r24, r22
 862:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_WriteCommand>
 866:	8f e1       	ldi	r24, 0x1F	; 31
 868:	9e e4       	ldi	r25, 0x4E	; 78
 86a:	01 97       	sbiw	r24, 0x01	; 1
 86c:	f1 f7       	brne	.-4      	; 0x86a <__stack+0xb>
 86e:	00 c0       	rjmp	.+0      	; 0x870 <__stack+0x11>
 870:	00 00       	nop
	_delay_ms(5);
}
 872:	0f 90       	pop	r0
 874:	0f 90       	pop	r0
 876:	df 91       	pop	r29
 878:	cf 91       	pop	r28
 87a:	08 95       	ret

0000087c <LCD_Clear>:
*                                    E_NOT_OK
*******************************************************************************/
void LCD_Clear(void)
{
	//command to clear LCD
	LCD_WriteCommand(0X01);
 87c:	81 e0       	ldi	r24, 0x01	; 1
 87e:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_WriteCommand>
 882:	8f e1       	ldi	r24, 0x1F	; 31
 884:	9e e4       	ldi	r25, 0x4E	; 78
 886:	01 97       	sbiw	r24, 0x01	; 1
 888:	f1 f7       	brne	.-4      	; 0x886 <LCD_Clear+0xa>
 88a:	00 c0       	rjmp	.+0      	; 0x88c <LCD_Clear+0x10>
 88c:	00 00       	nop
 88e:	08 95       	ret

00000890 <LED_ON>:
	#if (SELECTED_LED == RED_LED)
	DIO_WriteChannel(PORTC_PIN0 , PIN_HIGH);
	#elif (SELECTED_LED == GREEN_LED)
	DIO_WriteChannel(PORTC_PIN1 , PIN_HIGH);
	#elif (SELECTED_LED == BLUE_LED)
	DIO_WriteChannel(PORTC_PIN2 , PIN_HIGH);
 890:	61 e0       	ldi	r22, 0x01	; 1
 892:	82 e1       	ldi	r24, 0x12	; 18
 894:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
 898:	08 95       	ret

0000089a <LED_OFF>:
	#if (SELECTED_LED == RED_LED)
	DIO_WriteChannel(PORTC_PIN0 , PIN_LOW);
	#elif (SELECTED_LED == GREEN_LED) 
	DIO_WriteChannel(PORTC_PIN1 , PIN_LOW);
	#elif (SELECTED_LED == BLUE_LED)  
	DIO_WriteChannel(PORTC_PIN2 , PIN_LOW);
 89a:	60 e0       	ldi	r22, 0x00	; 0
 89c:	82 e1       	ldi	r24, 0x12	; 18
 89e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_WriteChannel>
 8a2:	08 95       	ret

000008a4 <DIO_WriteChannel>:
*                                    E_NOT_OK
*******************************************************************************/
void DIO_WriteChannel (uint8 Pin_Order, PIN_VAL_e Pin_Val)
{
	uint8 PORT =0, PIN=0 ;
	PORT= Pin_Order / NUMBER_OF_PORT_PINS;
 8a4:	98 2f       	mov	r25, r24
 8a6:	96 95       	lsr	r25
 8a8:	96 95       	lsr	r25
 8aa:	96 95       	lsr	r25
	PIN=  Pin_Order  % NUMBER_OF_PORT_PINS;
 8ac:	87 70       	andi	r24, 0x07	; 7
	
	switch (Pin_Val)
 8ae:	66 23       	and	r22, r22
 8b0:	09 f4       	brne	.+2      	; 0x8b4 <DIO_WriteChannel+0x10>
 8b2:	3f c0       	rjmp	.+126    	; 0x932 <DIO_WriteChannel+0x8e>
 8b4:	61 30       	cpi	r22, 0x01	; 1
 8b6:	09 f0       	breq	.+2      	; 0x8ba <DIO_WriteChannel+0x16>
 8b8:	7b c0       	rjmp	.+246    	; 0x9b0 <DIO_WriteChannel+0x10c>
	{
		case PIN_HIGH :
		switch(PORT)
 8ba:	91 30       	cpi	r25, 0x01	; 1
 8bc:	99 f0       	breq	.+38     	; 0x8e4 <DIO_WriteChannel+0x40>
 8be:	28 f0       	brcs	.+10     	; 0x8ca <DIO_WriteChannel+0x26>
 8c0:	92 30       	cpi	r25, 0x02	; 2
 8c2:	e9 f0       	breq	.+58     	; 0x8fe <DIO_WriteChannel+0x5a>
 8c4:	93 30       	cpi	r25, 0x03	; 3
 8c6:	41 f1       	breq	.+80     	; 0x918 <DIO_WriteChannel+0x74>
 8c8:	08 95       	ret
		{
			case 0:
			SET_BIT (PORTA , PIN);
 8ca:	4b b3       	in	r20, 0x1b	; 27
 8cc:	21 e0       	ldi	r18, 0x01	; 1
 8ce:	30 e0       	ldi	r19, 0x00	; 0
 8d0:	b9 01       	movw	r22, r18
 8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <DIO_WriteChannel+0x34>
 8d4:	66 0f       	add	r22, r22
 8d6:	77 1f       	adc	r23, r23
 8d8:	8a 95       	dec	r24
 8da:	e2 f7       	brpl	.-8      	; 0x8d4 <DIO_WriteChannel+0x30>
 8dc:	cb 01       	movw	r24, r22
 8de:	84 2b       	or	r24, r20
 8e0:	8b bb       	out	0x1b, r24	; 27
			break;
 8e2:	08 95       	ret
			case 1:
			SET_BIT (PORTB , PIN);
 8e4:	48 b3       	in	r20, 0x18	; 24
 8e6:	21 e0       	ldi	r18, 0x01	; 1
 8e8:	30 e0       	ldi	r19, 0x00	; 0
 8ea:	b9 01       	movw	r22, r18
 8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <DIO_WriteChannel+0x4e>
 8ee:	66 0f       	add	r22, r22
 8f0:	77 1f       	adc	r23, r23
 8f2:	8a 95       	dec	r24
 8f4:	e2 f7       	brpl	.-8      	; 0x8ee <DIO_WriteChannel+0x4a>
 8f6:	cb 01       	movw	r24, r22
 8f8:	84 2b       	or	r24, r20
 8fa:	88 bb       	out	0x18, r24	; 24
			break;
 8fc:	08 95       	ret
			case 2:
			SET_BIT (PORTC , PIN);
 8fe:	45 b3       	in	r20, 0x15	; 21
 900:	21 e0       	ldi	r18, 0x01	; 1
 902:	30 e0       	ldi	r19, 0x00	; 0
 904:	b9 01       	movw	r22, r18
 906:	02 c0       	rjmp	.+4      	; 0x90c <DIO_WriteChannel+0x68>
 908:	66 0f       	add	r22, r22
 90a:	77 1f       	adc	r23, r23
 90c:	8a 95       	dec	r24
 90e:	e2 f7       	brpl	.-8      	; 0x908 <DIO_WriteChannel+0x64>
 910:	cb 01       	movw	r24, r22
 912:	84 2b       	or	r24, r20
 914:	85 bb       	out	0x15, r24	; 21
			break;
 916:	08 95       	ret
			case 3:
			SET_BIT (PORTD , PIN);
 918:	42 b3       	in	r20, 0x12	; 18
 91a:	21 e0       	ldi	r18, 0x01	; 1
 91c:	30 e0       	ldi	r19, 0x00	; 0
 91e:	b9 01       	movw	r22, r18
 920:	02 c0       	rjmp	.+4      	; 0x926 <DIO_WriteChannel+0x82>
 922:	66 0f       	add	r22, r22
 924:	77 1f       	adc	r23, r23
 926:	8a 95       	dec	r24
 928:	e2 f7       	brpl	.-8      	; 0x922 <DIO_WriteChannel+0x7e>
 92a:	cb 01       	movw	r24, r22
 92c:	84 2b       	or	r24, r20
 92e:	82 bb       	out	0x12, r24	; 18
			break;
 930:	08 95       	ret
			break;
		}
		break;
		
		case PIN_LOW :
		switch(PORT)
 932:	91 30       	cpi	r25, 0x01	; 1
 934:	a1 f0       	breq	.+40     	; 0x95e <DIO_WriteChannel+0xba>
 936:	28 f0       	brcs	.+10     	; 0x942 <DIO_WriteChannel+0x9e>
 938:	92 30       	cpi	r25, 0x02	; 2
 93a:	f9 f0       	breq	.+62     	; 0x97a <DIO_WriteChannel+0xd6>
 93c:	93 30       	cpi	r25, 0x03	; 3
 93e:	59 f1       	breq	.+86     	; 0x996 <DIO_WriteChannel+0xf2>
 940:	08 95       	ret
		{
			case 0:
			CLR_BIT (PORTA , PIN);
 942:	4b b3       	in	r20, 0x1b	; 27
 944:	21 e0       	ldi	r18, 0x01	; 1
 946:	30 e0       	ldi	r19, 0x00	; 0
 948:	b9 01       	movw	r22, r18
 94a:	02 c0       	rjmp	.+4      	; 0x950 <DIO_WriteChannel+0xac>
 94c:	66 0f       	add	r22, r22
 94e:	77 1f       	adc	r23, r23
 950:	8a 95       	dec	r24
 952:	e2 f7       	brpl	.-8      	; 0x94c <DIO_WriteChannel+0xa8>
 954:	cb 01       	movw	r24, r22
 956:	80 95       	com	r24
 958:	84 23       	and	r24, r20
 95a:	8b bb       	out	0x1b, r24	; 27
			break;
 95c:	08 95       	ret
			case 1:
			CLR_BIT (PORTB , PIN);
 95e:	48 b3       	in	r20, 0x18	; 24
 960:	21 e0       	ldi	r18, 0x01	; 1
 962:	30 e0       	ldi	r19, 0x00	; 0
 964:	b9 01       	movw	r22, r18
 966:	02 c0       	rjmp	.+4      	; 0x96c <DIO_WriteChannel+0xc8>
 968:	66 0f       	add	r22, r22
 96a:	77 1f       	adc	r23, r23
 96c:	8a 95       	dec	r24
 96e:	e2 f7       	brpl	.-8      	; 0x968 <DIO_WriteChannel+0xc4>
 970:	cb 01       	movw	r24, r22
 972:	80 95       	com	r24
 974:	84 23       	and	r24, r20
 976:	88 bb       	out	0x18, r24	; 24
			break;
 978:	08 95       	ret
			case 2:
			CLR_BIT (PORTC , PIN);
 97a:	45 b3       	in	r20, 0x15	; 21
 97c:	21 e0       	ldi	r18, 0x01	; 1
 97e:	30 e0       	ldi	r19, 0x00	; 0
 980:	b9 01       	movw	r22, r18
 982:	02 c0       	rjmp	.+4      	; 0x988 <DIO_WriteChannel+0xe4>
 984:	66 0f       	add	r22, r22
 986:	77 1f       	adc	r23, r23
 988:	8a 95       	dec	r24
 98a:	e2 f7       	brpl	.-8      	; 0x984 <DIO_WriteChannel+0xe0>
 98c:	cb 01       	movw	r24, r22
 98e:	80 95       	com	r24
 990:	84 23       	and	r24, r20
 992:	85 bb       	out	0x15, r24	; 21
			break;
 994:	08 95       	ret
			case 3:
			CLR_BIT (PORTD , PIN);
 996:	42 b3       	in	r20, 0x12	; 18
 998:	21 e0       	ldi	r18, 0x01	; 1
 99a:	30 e0       	ldi	r19, 0x00	; 0
 99c:	b9 01       	movw	r22, r18
 99e:	02 c0       	rjmp	.+4      	; 0x9a4 <DIO_WriteChannel+0x100>
 9a0:	66 0f       	add	r22, r22
 9a2:	77 1f       	adc	r23, r23
 9a4:	8a 95       	dec	r24
 9a6:	e2 f7       	brpl	.-8      	; 0x9a0 <DIO_WriteChannel+0xfc>
 9a8:	cb 01       	movw	r24, r22
 9aa:	80 95       	com	r24
 9ac:	84 23       	and	r24, r20
 9ae:	82 bb       	out	0x12, r24	; 18
 9b0:	08 95       	ret

000009b2 <PORT_Init>:
 */ 

#include "PORT_Core.h"

void PORT_Init(void)
{
 9b2:	e0 e6       	ldi	r30, 0x60	; 96
 9b4:	f0 e0       	ldi	r31, 0x00	; 0
 9b6:	4c e7       	ldi	r20, 0x7C	; 124
 9b8:	50 e0       	ldi	r21, 0x00	; 0
					case PORT_A:
					     CLR_BIT(DDRA , PIN);
					break;
					
					case PORT_B:
					     CLR_BIT(DDRB , PIN);
 9ba:	61 e0       	ldi	r22, 0x01	; 1
 9bc:	70 e0       	ldi	r23, 0x00	; 0
void PORT_Init(void)
{
	uint8 cntr=0 , PORT=0 , PIN =0 , DIR= 0;
	for(cntr = 0 ; cntr < DEFINED_PINS ; cntr++ )
	{
		PORT = PORT_Initialization[cntr].PIN_NUM/NUMBER_OF_PORT_PINS;
 9be:	80 81       	ld	r24, Z
 9c0:	98 2f       	mov	r25, r24
 9c2:	96 95       	lsr	r25
 9c4:	96 95       	lsr	r25
 9c6:	96 95       	lsr	r25
		PIN =  PORT_Initialization[cntr].PIN_NUM%NUMBER_OF_PORT_PINS;
 9c8:	87 70       	andi	r24, 0x07	; 7
		DIR =  PORT_Initialization[cntr].DIR;
		
		switch (DIR)
 9ca:	21 81       	ldd	r18, Z+1	; 0x01
 9cc:	22 23       	and	r18, r18
 9ce:	19 f0       	breq	.+6      	; 0x9d6 <PORT_Init+0x24>
 9d0:	21 30       	cpi	r18, 0x01	; 1
 9d2:	c9 f1       	breq	.+114    	; 0xa46 <PORT_Init+0x94>
 9d4:	6b c0       	rjmp	.+214    	; 0xaac <PORT_Init+0xfa>
		{
			case PIN_DIR_INPUT :
			    switch (PORT)
 9d6:	91 30       	cpi	r25, 0x01	; 1
 9d8:	91 f0       	breq	.+36     	; 0x9fe <PORT_Init+0x4c>
 9da:	28 f0       	brcs	.+10     	; 0x9e6 <PORT_Init+0x34>
 9dc:	92 30       	cpi	r25, 0x02	; 2
 9de:	d9 f0       	breq	.+54     	; 0xa16 <PORT_Init+0x64>
 9e0:	93 30       	cpi	r25, 0x03	; 3
 9e2:	29 f1       	breq	.+74     	; 0xa2e <PORT_Init+0x7c>
 9e4:	63 c0       	rjmp	.+198    	; 0xaac <PORT_Init+0xfa>
				{
					case PORT_A:
					     CLR_BIT(DDRA , PIN);
 9e6:	9a b3       	in	r25, 0x1a	; 26
 9e8:	9b 01       	movw	r18, r22
 9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <PORT_Init+0x3e>
 9ec:	22 0f       	add	r18, r18
 9ee:	33 1f       	adc	r19, r19
 9f0:	8a 95       	dec	r24
 9f2:	e2 f7       	brpl	.-8      	; 0x9ec <PORT_Init+0x3a>
 9f4:	82 2f       	mov	r24, r18
 9f6:	80 95       	com	r24
 9f8:	89 23       	and	r24, r25
 9fa:	8a bb       	out	0x1a, r24	; 26
					break;
 9fc:	57 c0       	rjmp	.+174    	; 0xaac <PORT_Init+0xfa>
					
					case PORT_B:
					     CLR_BIT(DDRB , PIN);
 9fe:	97 b3       	in	r25, 0x17	; 23
 a00:	9b 01       	movw	r18, r22
 a02:	02 c0       	rjmp	.+4      	; 0xa08 <PORT_Init+0x56>
 a04:	22 0f       	add	r18, r18
 a06:	33 1f       	adc	r19, r19
 a08:	8a 95       	dec	r24
 a0a:	e2 f7       	brpl	.-8      	; 0xa04 <PORT_Init+0x52>
 a0c:	82 2f       	mov	r24, r18
 a0e:	80 95       	com	r24
 a10:	89 23       	and	r24, r25
 a12:	87 bb       	out	0x17, r24	; 23
					break;
 a14:	4b c0       	rjmp	.+150    	; 0xaac <PORT_Init+0xfa>
					
					case PORT_C:
					     CLR_BIT(DDRC , PIN);
 a16:	94 b3       	in	r25, 0x14	; 20
 a18:	9b 01       	movw	r18, r22
 a1a:	02 c0       	rjmp	.+4      	; 0xa20 <PORT_Init+0x6e>
 a1c:	22 0f       	add	r18, r18
 a1e:	33 1f       	adc	r19, r19
 a20:	8a 95       	dec	r24
 a22:	e2 f7       	brpl	.-8      	; 0xa1c <PORT_Init+0x6a>
 a24:	82 2f       	mov	r24, r18
 a26:	80 95       	com	r24
 a28:	89 23       	and	r24, r25
 a2a:	84 bb       	out	0x14, r24	; 20
					break;
 a2c:	3f c0       	rjmp	.+126    	; 0xaac <PORT_Init+0xfa>
					
					case PORT_D:
					     CLR_BIT(DDRD , PIN);
 a2e:	91 b3       	in	r25, 0x11	; 17
 a30:	9b 01       	movw	r18, r22
 a32:	02 c0       	rjmp	.+4      	; 0xa38 <PORT_Init+0x86>
 a34:	22 0f       	add	r18, r18
 a36:	33 1f       	adc	r19, r19
 a38:	8a 95       	dec	r24
 a3a:	e2 f7       	brpl	.-8      	; 0xa34 <PORT_Init+0x82>
 a3c:	82 2f       	mov	r24, r18
 a3e:	80 95       	com	r24
 a40:	89 23       	and	r24, r25
 a42:	81 bb       	out	0x11, r24	; 17
					break;
 a44:	33 c0       	rjmp	.+102    	; 0xaac <PORT_Init+0xfa>
					break;
				}
			break;
			
			case PIN_DIR_OUTPUT :
			    switch (PORT)
 a46:	91 30       	cpi	r25, 0x01	; 1
 a48:	89 f0       	breq	.+34     	; 0xa6c <PORT_Init+0xba>
 a4a:	28 f0       	brcs	.+10     	; 0xa56 <PORT_Init+0xa4>
 a4c:	92 30       	cpi	r25, 0x02	; 2
 a4e:	c9 f0       	breq	.+50     	; 0xa82 <PORT_Init+0xd0>
 a50:	93 30       	cpi	r25, 0x03	; 3
 a52:	11 f1       	breq	.+68     	; 0xa98 <PORT_Init+0xe6>
 a54:	2b c0       	rjmp	.+86     	; 0xaac <PORT_Init+0xfa>
			    {
				    case PORT_A:
				    SET_BIT(DDRA , PIN);
 a56:	2a b3       	in	r18, 0x1a	; 26
 a58:	db 01       	movw	r26, r22
 a5a:	02 c0       	rjmp	.+4      	; 0xa60 <PORT_Init+0xae>
 a5c:	aa 0f       	add	r26, r26
 a5e:	bb 1f       	adc	r27, r27
 a60:	8a 95       	dec	r24
 a62:	e2 f7       	brpl	.-8      	; 0xa5c <PORT_Init+0xaa>
 a64:	cd 01       	movw	r24, r26
 a66:	82 2b       	or	r24, r18
 a68:	8a bb       	out	0x1a, r24	; 26
				    break;
 a6a:	20 c0       	rjmp	.+64     	; 0xaac <PORT_Init+0xfa>
				    
				    case PORT_B:
				    SET_BIT(DDRB , PIN);
 a6c:	27 b3       	in	r18, 0x17	; 23
 a6e:	db 01       	movw	r26, r22
 a70:	02 c0       	rjmp	.+4      	; 0xa76 <PORT_Init+0xc4>
 a72:	aa 0f       	add	r26, r26
 a74:	bb 1f       	adc	r27, r27
 a76:	8a 95       	dec	r24
 a78:	e2 f7       	brpl	.-8      	; 0xa72 <PORT_Init+0xc0>
 a7a:	cd 01       	movw	r24, r26
 a7c:	82 2b       	or	r24, r18
 a7e:	87 bb       	out	0x17, r24	; 23
				    break;
 a80:	15 c0       	rjmp	.+42     	; 0xaac <PORT_Init+0xfa>
				    
				    case PORT_C:
				    SET_BIT(DDRC , PIN);
 a82:	24 b3       	in	r18, 0x14	; 20
 a84:	db 01       	movw	r26, r22
 a86:	02 c0       	rjmp	.+4      	; 0xa8c <PORT_Init+0xda>
 a88:	aa 0f       	add	r26, r26
 a8a:	bb 1f       	adc	r27, r27
 a8c:	8a 95       	dec	r24
 a8e:	e2 f7       	brpl	.-8      	; 0xa88 <PORT_Init+0xd6>
 a90:	cd 01       	movw	r24, r26
 a92:	82 2b       	or	r24, r18
 a94:	84 bb       	out	0x14, r24	; 20
				    break;
 a96:	0a c0       	rjmp	.+20     	; 0xaac <PORT_Init+0xfa>
				    
				    case PORT_D:
				    SET_BIT(DDRD , PIN);
 a98:	21 b3       	in	r18, 0x11	; 17
 a9a:	db 01       	movw	r26, r22
 a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <PORT_Init+0xf0>
 a9e:	aa 0f       	add	r26, r26
 aa0:	bb 1f       	adc	r27, r27
 aa2:	8a 95       	dec	r24
 aa4:	e2 f7       	brpl	.-8      	; 0xa9e <PORT_Init+0xec>
 aa6:	cd 01       	movw	r24, r26
 aa8:	82 2b       	or	r24, r18
 aaa:	81 bb       	out	0x11, r24	; 17
 aac:	32 96       	adiw	r30, 0x02	; 2
#include "PORT_Core.h"

void PORT_Init(void)
{
	uint8 cntr=0 , PORT=0 , PIN =0 , DIR= 0;
	for(cntr = 0 ; cntr < DEFINED_PINS ; cntr++ )
 aae:	e4 17       	cp	r30, r20
 ab0:	f5 07       	cpc	r31, r21
 ab2:	09 f0       	breq	.+2      	; 0xab6 <PORT_Init+0x104>
 ab4:	84 cf       	rjmp	.-248    	; 0x9be <PORT_Init+0xc>
			
			default:
			break;
		}
	}
 ab6:	08 95       	ret

00000ab8 <__divmodsi4>:
 ab8:	05 2e       	mov	r0, r21
 aba:	97 fb       	bst	r25, 7
 abc:	1e f4       	brtc	.+6      	; 0xac4 <__divmodsi4+0xc>
 abe:	00 94       	com	r0
 ac0:	0e 94 73 05 	call	0xae6	; 0xae6 <__negsi2>
 ac4:	57 fd       	sbrc	r21, 7
 ac6:	07 d0       	rcall	.+14     	; 0xad6 <__divmodsi4_neg2>
 ac8:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__udivmodsi4>
 acc:	07 fc       	sbrc	r0, 7
 ace:	03 d0       	rcall	.+6      	; 0xad6 <__divmodsi4_neg2>
 ad0:	4e f4       	brtc	.+18     	; 0xae4 <__divmodsi4_exit>
 ad2:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__negsi2>

00000ad6 <__divmodsi4_neg2>:
 ad6:	50 95       	com	r21
 ad8:	40 95       	com	r20
 ada:	30 95       	com	r19
 adc:	21 95       	neg	r18
 ade:	3f 4f       	sbci	r19, 0xFF	; 255
 ae0:	4f 4f       	sbci	r20, 0xFF	; 255
 ae2:	5f 4f       	sbci	r21, 0xFF	; 255

00000ae4 <__divmodsi4_exit>:
 ae4:	08 95       	ret

00000ae6 <__negsi2>:
 ae6:	90 95       	com	r25
 ae8:	80 95       	com	r24
 aea:	70 95       	com	r23
 aec:	61 95       	neg	r22
 aee:	7f 4f       	sbci	r23, 0xFF	; 255
 af0:	8f 4f       	sbci	r24, 0xFF	; 255
 af2:	9f 4f       	sbci	r25, 0xFF	; 255
 af4:	08 95       	ret

00000af6 <__udivmodsi4>:
 af6:	a1 e2       	ldi	r26, 0x21	; 33
 af8:	1a 2e       	mov	r1, r26
 afa:	aa 1b       	sub	r26, r26
 afc:	bb 1b       	sub	r27, r27
 afe:	fd 01       	movw	r30, r26
 b00:	0d c0       	rjmp	.+26     	; 0xb1c <__udivmodsi4_ep>

00000b02 <__udivmodsi4_loop>:
 b02:	aa 1f       	adc	r26, r26
 b04:	bb 1f       	adc	r27, r27
 b06:	ee 1f       	adc	r30, r30
 b08:	ff 1f       	adc	r31, r31
 b0a:	a2 17       	cp	r26, r18
 b0c:	b3 07       	cpc	r27, r19
 b0e:	e4 07       	cpc	r30, r20
 b10:	f5 07       	cpc	r31, r21
 b12:	20 f0       	brcs	.+8      	; 0xb1c <__udivmodsi4_ep>
 b14:	a2 1b       	sub	r26, r18
 b16:	b3 0b       	sbc	r27, r19
 b18:	e4 0b       	sbc	r30, r20
 b1a:	f5 0b       	sbc	r31, r21

00000b1c <__udivmodsi4_ep>:
 b1c:	66 1f       	adc	r22, r22
 b1e:	77 1f       	adc	r23, r23
 b20:	88 1f       	adc	r24, r24
 b22:	99 1f       	adc	r25, r25
 b24:	1a 94       	dec	r1
 b26:	69 f7       	brne	.-38     	; 0xb02 <__udivmodsi4_loop>
 b28:	60 95       	com	r22
 b2a:	70 95       	com	r23
 b2c:	80 95       	com	r24
 b2e:	90 95       	com	r25
 b30:	9b 01       	movw	r18, r22
 b32:	ac 01       	movw	r20, r24
 b34:	bd 01       	movw	r22, r26
 b36:	cf 01       	movw	r24, r30
 b38:	08 95       	ret

00000b3a <_exit>:
 b3a:	f8 94       	cli

00000b3c <__stop_program>:
 b3c:	ff cf       	rjmp	.-2      	; 0xb3c <__stop_program>
